<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <subtitle>等自己醒来，重走长征路</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-27T15:28:02.710Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>杨文旭</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>life is a fucking movie</title>
    <link href="http://example.com/2021/02/27/life-is-a-fucking-movie-md/"/>
    <id>http://example.com/2021/02/27/life-is-a-fucking-movie-md/</id>
    <published>2021-02-27T11:50:50.000Z</published>
    <updated>2021-02-27T15:28:02.710Z</updated>
    
    <content type="html"><![CDATA[<ol><li>人啊，还是多读读书的好，心智可能会更加成熟，遇事更能抗</li><li>相比平庸，我更能接受孤独</li><li>把热爱的事情做成极致，那便成了价值</li><li>给自己两年时间，你会怎样去提高你的水平</li><li>两年后你会是什么样的水平，你能承担多大的责任</li></ol><span id="more"></span><ol><li><p>人啊，还是多读读书的好，心智可能会更加成熟，遇事更能抗</p><p>​       想想自己这几年时间，读的书甚是少，可能相对来说更多的还是一些技术相关的书籍吧。平时空闲的时间可能更多地还是花费在了手机上面，想想以前用腾讯视频看一些动漫看的多，但是从疫情之后，也就不怎么去追动漫了，追的也就秦时明月和斗罗大陆了，如果画江湖的系列更新的话，可能还会再追吧。画江湖系列每一步都从头追到尾了，还记得灵主里面的“今生提着头，还你前世笑”，以前都挺喜欢看的。从疫情之后花费时间最多的可能是抖音了吧。总而言之，手机还是玩的太多了，导致这几年很少去读读书。</p><p>​        技术相关，</p><p>​        技术之外，也不过生活而已。大学的时候重点是看了大冰的书，可能觉得冰叔的那种既能浪迹天涯又能朝九晚五的人生观和自己的差不多吧，所以也一直很欣赏，也能引起自己对于生活的思考。我一直也想在工作忙碌之后，和兄弟们喝喝酒吹吹牛放飞自我，在酒过三巡之后谈谈心说说故事。除此之外，看了一本有关心灵鸡汤方面的书，书名是深夜加油站遇见苏格拉底，总之是说我们不仅在生活和工作上加油，也要经常去给自己的心灵上加一点油，这本书帮助了我很多很多，每次我烦躁不已，焦虑难安的时候我会把这本书拿出来读上一遭。会让我更加自律一点，会让我变得更加平静一点。所以迷茫和焦虑的原因估计就是想的太多，做的又太少，也是因为读的书太少了。所以，人呀，还是多读读书的好，头可能会更加合适一点，心智可能也会更加成熟，可能更会明白生活的意义吧。我们慌慌张张，匆匆忙忙，碎银几两也不全是为了房子和车子，但都是出于对生活的无限热爱与向往，但这种追求自然包含了车子房子。热爱漫无边际，生活自有分寸。虽然说长大了毕业了，男人的快乐越来越少，以前总会说男人的快乐不过就喝酒泡妞打游戏了，后面又说过男人的快乐，不是在梦中，就是在酒中。但心智成熟之后发现，这种对生活的漫无边际的热爱，正是我所追求的快乐吧。</p></li><li><p>相比平庸，我更能接受孤独</p><p>   ​      虽然说早已经习惯一个人自由自在的生活，但可能还是时常会觉得自己稍显孤单一点吧，有时候甚至找不到能和自己一起碰杯饮酒的老友。但自己也很明白，要想更快更好的成长起来，肯定要经历这种深深的孤独吧，强者生而孤独。所以说，相比平庸，我更喜欢孤独吧。已经很长时间很长时间没有谈过女朋友，现在找女朋友肯定和大学里面不一样了，大学里面只是最单纯的仅仅是恋爱而已，对于两个人的未来发展都没有做过考虑。但是现在不一样了，已经也折腾不起了，都已经二十老几的人了，要找就得找确确实实未来会结婚的那种咯。呵，想想自己这一路，跌跌撞撞，兜兜转转，伤害了好多人，辜负了好多人，失去了好多，有太多遗憾，有太多痛苦，但也有太多美好的回忆，只愿我还是我。希望当自己以后找到那个心之所向的女孩时，能把那份最单纯的喜欢和守护，还有数不尽的温柔都给她，也能在谈情说爱时有足够的能力把那一份责任完完全全的抗在肩上。你若敢爱，我必护你一世周全，许你一生所爱。</p></li><li><p>把热爱的事情做成极致，那便成了价值</p><p>​       当你想要开车去周游世界时，并不需要给自己的车装满足够跑完整个世界的油量，<br>而只需要加满第一箱油就可以了，路上有那么多加油站，你随时都可以加油，<br>路上有那么多的人，你也不用所有的事都只靠自己，想要一箱油就跑完整个世界的<br>人遍地都是，但他们可能永远都不会出发，只有那些真正经历过的风景，<br>才会让人真正变得丰富起来，哪怕看风景时的你狼狈不堪。这段话是以前在网上看到，也纯属是鸡汤吧，虽说是鸡汤吧，但人有时候可能确实是需要那么一点来给自己打打气吧。</p><p>​        有过这样一句话“他想把我推向深渊，但他不知道的是，我本就来自于深渊，所以我无所畏惧”，对啊，像我这样一个人飘荡在外，从那时心如死灰之后，就已经在外没有什么彻彻底底在乎的了，也就没有什么害怕的了，所以我这样无所畏惧，也希望能够无坚不摧。所以，以后的路，不要担心什么，只管大胆的去尝试去努力，去把自己热爱的事情做到极致就行了。</p></li><li><p>给自己两年时间，你会怎样去提高你的水平</p><pre><code> 计算机编程知识是需要积累的，花一两年时间啃下那些厚厚的经典书籍后， 才能构建自己的知识体系，然后阅读大量优秀源码，做一些有趣的项目， 编程能力就能突飞猛进啦。 很多技术上的想法，都来自业务本身遇到的问题，挺有意思。</code></pre></li><li><p>两年后你会是什么样的水平，你能承担多大的责任</p><p>   真正好的工作经验应当是持续学习与进步的，<br>   不仅限于技术上的进步，如何写好易于维护的代码、<br>   如何用技术能力保障业务的稳定性、如何引领新人快速融入团队，<br>   都是不可或缺的东西，想要获得这些能力，需要时间，<br>   但更需要你的主动探索与实践，而这些是无法速成的东西，<br>   也是你作为一个技术老鸟，能跟应届生真正拉开差距的地方</p><p>   少年啊，本应该和虎狼一样，那就再努力一点，希望能早日拥有一个人扛事儿的能力。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ol&gt;
&lt;li&gt;人啊，还是多读读书的好，心智可能会更加成熟，遇事更能抗&lt;/li&gt;
&lt;li&gt;相比平庸，我更能接受孤独&lt;/li&gt;
&lt;li&gt;把热爱的事情做成极致，那便成了价值&lt;/li&gt;
&lt;li&gt;给自己两年时间，你会怎样去提高你的水平&lt;/li&gt;
&lt;li&gt;两年后你会是什么样的水平，你能承担多大的责任&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="life" scheme="http://example.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>koa源码原理解析</title>
    <link href="http://example.com/2020/09/22/koa%E6%BA%90%E7%A0%81%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2020/09/22/koa%E6%BA%90%E7%A0%81%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2020-09-22T12:07:17.000Z</published>
    <updated>2020-09-22T13:55:01.784Z</updated>
    
    <content type="html"><![CDATA[<p>一个语言的成熟需要时间的积累，,koa是一个新的web框架，致⼒于成为 web 应⽤和 API 开发领域中的⼀个更⼩、更富有表现⼒、更健壮的基⽯。</p><span id="more"></span><h2 id="koa"><a href="#koa" class="headerlink" title="koa"></a>koa</h2><ul><li><p>概述：koa是一个新的web框架，致⼒于成为 web 应⽤和 API 开发领域中的⼀个更⼩、更富有<br>  表现⼒、更健壮的基⽯。</p><p>koa是Express的下一代基于nodejs的web框架</p><p>koa2完全使用promise并配合async来实现异步</p></li><li><p>特点：</p><ol><li>轻量，无捆绑</li><li>中间件架构</li><li>优雅的API设计</li><li>增强的错误处理</li></ol></li><li><p>安装：npm i koa -S</p></li><li><p>中间件机制，请求，响应处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.use(<span class="function">(<span class="params">ctx, next</span>) =&gt;</span> &#123;  </span><br><span class="line">    ctx.body = [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;tom&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> router = &#123;&#125;</span><br><span class="line">router[<span class="string">&#x27;/html&#x27;</span>] = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.type = <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">    ctx.body = <span class="string">`&lt;b&gt;我的名字是:<span class="subst">$&#123;ctx.body[<span class="number">0</span>].name&#125;</span>&lt;/b&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搞个⼩路由</span></span><br><span class="line"><span class="keyword">const</span> router = &#123;&#125;</span><br><span class="line">router[<span class="string">&#x27;/html&#x27;</span>] = <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line"> ctx.type = <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line"> ctx.body = <span class="string">`&lt;b&gt;我的名字是:<span class="subst">$&#123;ctx.body[<span class="number">0</span>].name&#125;</span>&lt;/b&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = router[ctx.url]</span><br><span class="line">fun &amp;&amp; fun(ctx)</span><br></pre></td></tr></table></figure></li><li><p>koa中间件机制  </p><p>​      Koa中间件机制就是函数式 组合概念 Compose的概念，将 ⼀组需要顺序执⾏的 函数复合为⼀个函数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机 制，是源码中的精髓和难点。</p></li><li><p>常见的中间件操作</p><ul><li><p>静态服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)(__dirname + <span class="string">&#x27;/&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line">router.get(<span class="string">&#x27;/string&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line"> ctx.body = <span class="string">&#x27;koa2 string&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="string">&#x27;/json&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">     ctx.body = &#123;</span><br><span class="line">     title: <span class="string">&#x27;koa2 json&#x27;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.use(router.routes())</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>日志</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</span><br><span class="line">     <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`start: <span class="subst">$&#123;ctx.url&#125;</span>`</span>);</span><br><span class="line">     <span class="keyword">await</span> next();</span><br><span class="line">     <span class="keyword">const</span> end = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`请求<span class="subst">$&#123;ctx.url&#125;</span>, 耗时<span class="subst">$&#123;<span class="built_in">parseInt</span>(end-start)&#125;</span>ms`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="koa原理："><a href="#koa原理：" class="headerlink" title="koa原理："></a>koa原理：</h2><ul><li><p>​    ⼀个基于nodejs的⼊⻔级http服务，类似下⾯代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">     res.writeHead(<span class="number">200</span>)</span><br><span class="line">     res.end(<span class="string">&#x27;hi kaikeba&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;监听端⼝3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>​    koa的目标是用简单化，流程化，模块化的方式实现回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建kkb.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KKB</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">listen</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.callback(req, res);</span><br><span class="line">         &#125;);</span><br><span class="line">         server.listen(...args);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">use</span>(<span class="params">callback</span>)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.callback = callback;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = KKB;</span><br><span class="line"><span class="comment">// 调⽤，index.js</span></span><br><span class="line"><span class="keyword">const</span> KKB = <span class="built_in">require</span>(<span class="string">&quot;./kkb&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> KKB();</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;<span class="string">` `</span></span><br><span class="line">res.writeHead(<span class="number">200</span>);</span><br><span class="line"> res.end(<span class="string">&quot;hi kaikeba&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;监听端⼝3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>   ⽬前为⽌，KKB只是个⻢甲，要真正实现⽬标还需要引⼊上下⽂（context）和中间件机制 （middleware）</p></li></ul><h2 id="context"><a href="#context" class="headerlink" title="context"></a>context</h2><ul><li><p>koa为了能够简化API，引⼊上下⽂context概念，将原始请求对象req和响应对象res封装并挂载到 context上，并且在context上设置getter和setter，从⽽简化操作。</p></li><li><p>知识储备：getter/setter方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试代码，test-getter-setter.js</span></span><br><span class="line"><span class="keyword">const</span> kaikeba = &#123;</span><br><span class="line"> info:&#123; <span class="attr">name</span>: <span class="string">&#x27;开课吧&#x27;</span>, <span class="attr">desc</span>: <span class="string">&#x27;开课吧真不错&#x27;</span> &#125;,</span><br><span class="line"> <span class="keyword">get</span> <span class="title">name</span>()&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.info.name</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="keyword">set</span> <span class="title">name</span>(<span class="params">val</span>)&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;new name is&#x27;</span> + val)</span><br><span class="line"> <span class="built_in">this</span>.info.name = val</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(kaikeba.name)</span><br><span class="line">kaikeba.name = <span class="string">&#x27;kaikeba&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(kaikeba.name)</span><br></pre></td></tr></table></figure></li><li><p>封装request，response和context</p><p><a href="https://github.com/koajs/koa/blob/master/lib/response.js">https://github.com/koajs/koa/blob/master/lib/response.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="keyword">get</span> <span class="title">url</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.req.url;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">get</span> <span class="title">method</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.req.method.toLowerCase()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// response.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="keyword">get</span> <span class="title">body</span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>._body;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="keyword">set</span> <span class="title">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">     <span class="built_in">this</span>._body = val;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// context.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="keyword">get</span> <span class="title">url</span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.request.url;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="keyword">get</span> <span class="title">body</span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.response.body;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="keyword">set</span> <span class="title">body</span>(<span class="params">val</span>) &#123;</span><br><span class="line">     <span class="built_in">this</span>.response.body = val;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="keyword">get</span> <span class="title">method</span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.request.method</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kkb.js</span></span><br><span class="line"><span class="comment">// 导⼊这三个类</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">&quot;./context&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;./request&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">&quot;./response&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KKB</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">listen</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="comment">// 创建上下⽂</span></span><br><span class="line">             <span class="keyword">let</span> ctx = <span class="built_in">this</span>.createContext(req, res);</span><br><span class="line"></span><br><span class="line">             <span class="built_in">this</span>.callback(ctx)</span><br><span class="line">             <span class="comment">// 响应</span></span><br><span class="line">             res.end(ctx.body);</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="comment">// ...</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 构建上下⽂, 把res和req都挂载到ctx之上，并且在ctx.req和ctx.request.req同时保存</span></span><br><span class="line">     <span class="function"><span class="title">createContext</span>(<span class="params">req, res</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> ctx = <span class="built_in">Object</span>.create(context);</span><br><span class="line">         ctx.request = <span class="built_in">Object</span>.create(request);</span><br><span class="line">         ctx.response = <span class="built_in">Object</span>.create(response);</span><br><span class="line">         ctx.req = ctx.request.req = req;</span><br><span class="line">         ctx.res = ctx.response.res = res;</span><br><span class="line">         <span class="keyword">return</span> ctx;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li><p>Koa中间件机制：Koa中间件机制就是函数组合的概念，将⼀组需要顺序执⾏的函数复合为⼀个函 数，外层函数的参数实际是内层函数的返回值。洋葱圈模型可以形象表示这种机制，是源码中的精 髓和难点。</p></li><li><p>异步中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">middlewares</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">         <span class="comment">// 执⾏第0个</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">let</span> fn = middlewares[i];</span><br><span class="line">             <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">                 fn(<span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                     <span class="comment">// promise完成后，再执⾏下⼀个</span></span><br><span class="line">                     <span class="keyword">return</span> dispatch(i + <span class="number">1</span>);</span><br><span class="line">                 &#125;)</span><br><span class="line">             );</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;fn1&quot;</span>);</span><br><span class="line">     <span class="keyword">await</span> next();</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;end fn1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;fn2&quot;</span>);</span><br><span class="line">     <span class="keyword">await</span> delay();</span><br><span class="line">     <span class="keyword">await</span> next();</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&quot;end fn2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;fn3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> vnm        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            reslove();</span><br><span class="line">         &#125;, <span class="number">2000</span>);</span><br><span class="line">     &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> middlewares = [fn1, fn2, fn3];</span><br><span class="line"><span class="keyword">const</span> finalFn = compose(middlewares);</span><br><span class="line">finalFn();</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>compose用在koa中，kkb.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> context = <span class="built_in">require</span>(<span class="string">&quot;./context&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;./request&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> response = <span class="built_in">require</span>(<span class="string">&quot;./response&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KKB</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 初始化中间件数组</span></span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.middlewares = [];</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">listen</span>(<span class="params">...args</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">const</span> server = http.createServer(<span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">             <span class="keyword">const</span> ctx = <span class="built_in">this</span>.createContext(req, res);</span><br><span class="line">             <span class="comment">// 中间件合成</span></span><br><span class="line">             <span class="keyword">const</span> fn = <span class="built_in">this</span>.compose(<span class="built_in">this</span>.middlewares);</span><br><span class="line">             <span class="comment">// 执⾏合成函数并传⼊上下⽂</span></span><br><span class="line">             <span class="keyword">await</span> fn(ctx);</span><br><span class="line">             res.end(ctx.body);</span><br><span class="line">         &#125;);</span><br><span class="line">         server.listen(...args);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">use</span>(<span class="params">middleware</span>)</span> &#123;</span><br><span class="line">         <span class="comment">// 将中间件加到数组⾥</span></span><br><span class="line">         <span class="built_in">this</span>.middlewares.push(middleware);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 合成函数</span></span><br><span class="line">     <span class="function"><span class="title">compose</span>(<span class="params">middlewares</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123; <span class="comment">// 传⼊上下⽂</span></span><br><span class="line">             <span class="keyword">return</span> dispatch(<span class="number">0</span>);</span><br><span class="line">             <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">let</span> fn = middlewares[i];</span><br><span class="line">                 <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(</span><br><span class="line">                    fn(ctx, <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 将上下⽂传⼊中间件，mid(ctx,next)</span></span><br><span class="line">                        <span class="keyword">return</span> dispatch(i + <span class="number">1</span>);</span><br><span class="line">                    &#125;)</span><br><span class="line">                 );</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">createContext</span>(<span class="params">req, res</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> ctx = <span class="built_in">Object</span>.create(context);</span><br><span class="line">         ctx.request = <span class="built_in">Object</span>.create(request);</span><br><span class="line">         ctx.response = <span class="built_in">Object</span>.create(response);</span><br><span class="line">         ctx.req = ctx.request.req = req;</span><br><span class="line">         ctx.res = ctx.response.res = res;</span><br><span class="line">         <span class="keyword">return</span> ctx;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = KKB;</span><br></pre></td></tr></table></figure><p>使用， app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> delay = <span class="function">() =&gt;</span> <span class="built_in">Promise</span>.resolve(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(),<span class="number">2000</span>));</span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">     ctx.body = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">     <span class="keyword">await</span> next();</span><br><span class="line">     ctx.body += <span class="string">&quot;5&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">     ctx.body += <span class="string">&quot;2&quot;</span>;</span><br><span class="line">     <span class="keyword">await</span> delay();</span><br><span class="line">     <span class="keyword">await</span> next();</span><br><span class="line">     ctx.body += <span class="string">&quot;4&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line"> ctx.body += <span class="string">&quot;3&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>koa-compose的<a href="https://github.com/koajs/compose/blob/master/index.js">源码</a></p></li></ul><h2 id="常见koa中间件的实现"><a href="#常见koa中间件的实现" class="headerlink" title="常见koa中间件的实现"></a>常见koa中间件的实现</h2><ul><li><p>koa中间件的规范</p><ul><li><p>一个是async函数</p></li><li><p>接收ctx和next两个参数</p></li><li><p>任务结束需要执行next</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mid = <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">     <span class="comment">// 来到中间件，洋葱圈左边</span></span><br><span class="line">     next() <span class="comment">// 进⼊其他中间件</span></span><br><span class="line">     <span class="comment">// 再次来到中间件，洋葱圈右边</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>中间件常见任务</p><ul><li>请求拦截</li><li>路由</li><li>日志</li><li>静态文件服务</li></ul></li><li><p>路由router可能的用法</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;./kkb&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.get(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;index page&#x27;</span>; &#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/post&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;post page&#x27;</span>; &#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/list&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;list page&#x27;</span>; &#125;);</span><br><span class="line">router.post(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;post page&#x27;</span>; &#125;);</span><br><span class="line"><span class="comment">// 路由实例输出⽗中间件 router.routes()</span></span><br><span class="line">app.use(router.routes());</span><br></pre></td></tr></table></figure><p>  routes()的返回值是⼀个中间件，由于需要⽤到method，所以需要挂载method到ctx之上。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="comment">// add...</span></span><br><span class="line">     <span class="keyword">get</span> <span class="title">method</span>()&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.req.method.toLowerCase()</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// context.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">     <span class="comment">// add...</span></span><br><span class="line">     <span class="keyword">get</span> <span class="title">method</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.request.method</span><br><span class="line">     &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stack = [];</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="title">register</span>(<span class="params">path, methods, middleware</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> route = &#123;path, methods, middleware&#125;</span><br><span class="line">         <span class="built_in">this</span>.stack.push(route);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 现在只⽀持get和post，其他的同理</span></span><br><span class="line">     <span class="function"><span class="title">get</span>(<span class="params">path,middleware</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.register(path, <span class="string">&#x27;get&#x27;</span>, middleware);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">post</span>(<span class="params">path,middleware</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.register(path, <span class="string">&#x27;post&#x27;</span>, middleware);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="title">routes</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">let</span> stock = <span class="built_in">this</span>.stack;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">let</span> currentPath = ctx.url;</span><br><span class="line">             <span class="keyword">let</span> route;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stock.length; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> item = stock[i];</span><br><span class="line">                 <span class="keyword">if</span> (currentPath === item.path &amp;&amp; item.methods.indexOf(ctx.method) &gt;=<span class="number">0</span>) &#123;</span><br><span class="line">                     <span class="comment">// 判断path和method</span></span><br><span class="line">                     route = item.middleware;</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">if</span> (<span class="keyword">typeof</span> route === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">                 route(ctx, next);</span><br><span class="line">                 <span class="keyword">return</span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">await</span> next();</span><br><span class="line">         &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">module</span>.exports = Router;</span><br></pre></td></tr></table></figure><p>  使用：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">&#x27;./kkb&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">&#x27;./router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line">router.get(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">&#x27;index,xx&#x27;</span>)</span><br><span class="line">     ctx.body = <span class="string">&#x27;index page&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/post&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;post page&#x27;</span>; &#125;);</span><br><span class="line">router.get(<span class="string">&#x27;/list&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;list page&#x27;</span>; &#125;);</span><br><span class="line">router.post(<span class="string">&#x27;/index&#x27;</span>, <span class="keyword">async</span> ctx =&gt; &#123; ctx.body = <span class="string">&#x27;post page&#x27;</span>; &#125;);</span><br><span class="line"><span class="comment">// 路由实例输出⽗中间件 router.routes()</span></span><br><span class="line">app.use(router.routes());</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&#x27;server runing on port 9092&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><p>静态文件服务koa-static</p><ul><li><p>配置绝对资源目录地址，默认为static</p></li><li><p>获取文件或者目录信息</p></li><li><p>静态文件读取</p><p>返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// static.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">dirPath = <span class="string">&quot;./public&quot;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ctx.url.indexOf(<span class="string">&quot;/public&quot;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// public开头 读取文件</span></span><br><span class="line">      <span class="keyword">const</span> url = path.resolve(__dirname, dirPath);</span><br><span class="line">      <span class="keyword">const</span> fileBaseName = path.basename(url);</span><br><span class="line">      <span class="keyword">const</span> filepath = url + ctx.url.replace(<span class="string">&quot;/public&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(filepath);</span><br><span class="line">      <span class="comment">// console.log(ctx.url,url, filepath, fileBaseName)</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        stats = fs.statSync(filepath);</span><br><span class="line">        <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line">          <span class="keyword">const</span> dir = fs.readdirSync(filepath);</span><br><span class="line">          <span class="comment">// const</span></span><br><span class="line">          <span class="keyword">const</span> ret = [<span class="string">&#x27;&lt;div style=&quot;padding-left:20px&quot;&gt;&#x27;</span>];</span><br><span class="line">          dir.forEach(<span class="function"><span class="params">filename</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(filename);</span><br><span class="line">            <span class="comment">// 简单认为不带小数点的格式，就是文件夹，实际应该用statSync</span></span><br><span class="line">            <span class="keyword">if</span> (filename.indexOf(<span class="string">&quot;.&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">              ret.push(</span><br><span class="line">                <span class="string">`&lt;p&gt;&lt;a style=&quot;color:black&quot; href=&quot;<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">                  ctx.url</span></span></span><br><span class="line"><span class="string"><span class="subst">                &#125;</span>/<span class="subst">$&#123;filename&#125;</span>&quot;&gt;<span class="subst">$&#123;filename&#125;</span>&lt;/a&gt;&lt;/p&gt;`</span></span><br><span class="line">              );</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 文件</span></span><br><span class="line">              ret.push(</span><br><span class="line">                <span class="string">`&lt;p&gt;&lt;a href=&quot;<span class="subst">$&#123;ctx.url&#125;</span>/<span class="subst">$&#123;filename&#125;</span>&quot;&gt;<span class="subst">$&#123;filename&#125;</span>&lt;/a&gt;&lt;/p&gt;`</span></span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">          ret.push(<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line">          ctx.body = ret.join(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">const</span> content = fs.readFileSync(filepath);</span><br><span class="line">          ctx.body = content;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// 报错了 文件不存在</span></span><br><span class="line">        ctx.body = <span class="string">&quot;404, not found&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则不是静态资源，直接去下一个中间件</span></span><br><span class="line">      <span class="keyword">await</span> next();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使⽤</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;./static&#x27;</span>)</span><br><span class="line">app.use(<span class="keyword">static</span>(__dirname + <span class="string">&#x27;/public&#x27;</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>请求拦截：黑名单中存在的ip访问将被拒绝</p><p>​    请求拦截应用非常广泛，登录状态验证，cors头设置等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iptable.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx, next</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; res, req &#125; = ctx;</span><br><span class="line">     <span class="keyword">const</span> blackList = [<span class="string">&#x27;127.0.0.1&#x27;</span>];</span><br><span class="line">     <span class="keyword">const</span> ip = getClientIP(req);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (blackList.includes(ip)) &#123;<span class="comment">//出现在⿊名单中将被拒绝</span></span><br><span class="line">         ctx.body = <span class="string">&quot;not allowed&quot;</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getClientIP</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">         req.headers[<span class="string">&quot;x-forwarded-for&quot;</span>] || <span class="comment">// 判断是否有反向代理 IP</span></span><br><span class="line">         req.connection.remoteAddress || <span class="comment">// 判断 connection 的远程 IP</span></span><br><span class="line">         req.socket.remoteAddress || <span class="comment">// 判断后端的 socket 的 IP</span></span><br><span class="line">         req.connection.socket.remoteAddress</span><br><span class="line">     );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">&quot;./interceptor&quot;</span>));</span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">&quot;监听端⼝3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个语言的成熟需要时间的积累，,koa是一个新的web框架，致⼒于成为 web 应⽤和 API 开发领域中的⼀个更⼩、更富有表现⼒、更健壮的基⽯。&lt;/p&gt;</summary>
    
    
    
    
    <category term="node" scheme="http://example.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>vue组件化通信</title>
    <link href="http://example.com/2020/08/19/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/2020/08/19/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E9%80%9A%E4%BF%A1/</id>
    <published>2020-08-19T12:20:19.000Z</published>
    <updated>2020-08-19T12:39:14.695Z</updated>
    
    <content type="html"><![CDATA[<pre><code>平时在使用Vue框架的业务开发中，组件不仅仅要把模板的内容进行复用，更重要的是组件之间要进行通信。组件之间通信分为三种：父-子；子-父；跨级组件通信。下面，就组件间如何通信做一些总结。</code></pre><span id="more"></span><h2 id="1-父传子组件"><a href="#1-父传子组件" class="headerlink" title="1. 父传子组件"></a>1. 父传子组件</h2><pre><code>在组件中，使用选项props来声明需要从父级组件接受的数据，props的值可以是两种：一种是字符串数组，一种是对象。props中声明的数据与组件data函数return的主要区别在于props来自父级，而data中的组件是自己的数据，作用域是组件本身，这两种数据都可以在模板template及计算属性computed和方法methods中使用。如以下例子：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 父组件 ParentComponent</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parent-component&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;这是一个父组件&lt;/h2&gt;</span><br><span class="line">    &lt;ChildComponent :parentMessage=<span class="string">&quot;parentMessage&quot;</span>/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ChildComponent <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">&quot;ParentComponent&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        parentMessage:<span class="string">&#x27;这是来自父组件的数据&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      ChildComponent</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 子组件 ChildComponent</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;child-component&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;h2&gt;这是一个子组件&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;h3&gt;&#123;&#123;parentMessage&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  export default &#123;</span></span><br><span class="line"><span class="string">    name: &quot;ChildComponent&quot;,</span></span><br><span class="line"><span class="string">    props:[&quot;parentMessage&quot;]</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">小结：父组件传递个子组件的数据可以写死，也可以用父级的动态数据用v-bind来绑定props的值。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 2. 子传父</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当子组件需要向父组件传递数据时，就要用到自定义事件，v-on指令除了监听DOM事件外，还可以用于组件间的自定义事件，</span></span><br><span class="line"><span class="string">Vue组件有一套类似与观察者模式的一套模式，子组件用$emit()来触发事件，父组件用$on()来监听子组件的事件。举个例子如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParentComponent 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;parent-component&quot;</span>&gt;</span><br><span class="line">    &lt;h2&gt;这是一个父组件total:&#123;&#123;total&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;ChildComponent :parentMessage=<span class="string">&quot;parentMessage&quot;</span> :total=<span class="string">&quot;total&quot;</span> @handleAdd10=<span class="string">&quot;getTotal&quot;</span>/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> ChildComponent <span class="keyword">from</span> <span class="string">&#x27;./ChildComponent&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">&quot;ParentComponent&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        parentMessage:<span class="string">&#x27;这是来自父组件的数据&#x27;</span>,</span><br><span class="line">        total:<span class="number">10</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      ChildComponent</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      <span class="function"><span class="title">getTotal</span>(<span class="params">total</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.total=total;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ParentComponent total:&#x27;</span>,total);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// ChildComponent 子组件</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;child-component&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;h2&gt;这是一个子组件&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;h3&gt;&#123;&#123;parentMessage&#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;button @click=&quot;handleAdd10&quot;&gt;+10按钮&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  export default &#123;</span></span><br><span class="line"><span class="string">    name: &quot;ChildComponent&quot;,</span></span><br><span class="line"><span class="string">    props:[&quot;parentMessage&quot;,&quot;total&quot;],</span></span><br><span class="line"><span class="string">    methods:&#123;</span></span><br><span class="line"><span class="string">      handleAdd10()&#123;</span></span><br><span class="line"><span class="string">        let total=this.total+10;</span></span><br><span class="line"><span class="string">        console.log(&#x27;ChildComponent $emit:&#x27;);</span></span><br><span class="line"><span class="string">        this.$emit(&#x27;handleAdd10&#x27;,total);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上面例子中，子组件有一个按钮，实现加10的效果，子组件通过props项来接收父组件传入的total值，在改变total后，</span></span><br><span class="line"><span class="string">通过$emit把它传给父组件，父组件定义事件@handleAdd10方法，子组件$emit()方法第一个参数是自定义事件的名称，</span></span><br><span class="line"><span class="string">后面的参数是要传的数据，对应的父组件通过getTotal(total)来接收子组件传递的数据，由此子组件到父组件通信完成。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 3.表单子组件到父组件通过v-model来通信(语法糖)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParentComponent 改动如下</span></span><br><span class="line">**</span><br><span class="line">&lt;h2&gt;这是一个父组件total:&#123;&#123;total&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;ChildComponent :parentMessage=<span class="string">&quot;parentMessage&quot;</span> :total=<span class="string">&quot;total&quot;</span> @handleAdd10=<span class="string">&quot;getTotal&quot;</span>/&gt;</span><br><span class="line">&lt;InputComponent v-model=<span class="string">&quot;total&quot;</span>/&gt;</span><br><span class="line">**</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> InputComponent <span class="keyword">from</span> <span class="string">&#x27;./InputComponent&#x27;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">**</span><br><span class="line"></span><br><span class="line"><span class="comment">// InputComponent 子组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> @input=<span class="string">&quot;updateValue($event)&quot;</span>&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">&quot;InputComponent&quot;</span>,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      <span class="function"><span class="title">updateValue</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>,evt.target.value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>以上示例中：因为子组件的石建明是特殊的input，在使用组件的父级，可以通过v-model来绑定数据total，这种实现方式也可以称作语法糖，大大减少了父组件代码量。</code></pre><h2 id="3-兄弟组件"><a href="#3-兄弟组件" class="headerlink" title="3. 兄弟组件"></a>3. 兄弟组件</h2><h2 id="4-祖先后代provide-inject"><a href="#4-祖先后代provide-inject" class="headerlink" title="4. 祖先后代provide $ inject"></a>4. 祖先后代provide $ inject</h2><h2 id="5-dispatch"><a href="#5-dispatch" class="headerlink" title="5. dispatch"></a>5. dispatch</h2><h2 id="6-boardcast"><a href="#6-boardcast" class="headerlink" title="6. boardcast"></a>6. boardcast</h2><h2 id="7-全局挂载dispatch和boardcast"><a href="#7-全局挂载dispatch和boardcast" class="headerlink" title="7. 全局挂载dispatch和boardcast"></a>7. 全局挂载dispatch和boardcast</h2><h2 id="8-event-bus中央事件总线"><a href="#8-event-bus中央事件总线" class="headerlink" title="8. event-bus中央事件总线"></a>8. event-bus中央事件总线</h2><pre><code class="lang-javascript">// ParentComponent 父组件&lt;template&gt;  &lt;div class=&quot;parent-component&quot;&gt;    &#123;&#123;message&#125;&#125;    &lt;br&gt;    &lt;br&gt;    &lt;component-a/&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  import Vue from &#39;vue&#39;  let bus=new Vue();  export default &#123;    name: &quot;ParentComponent&quot;,    data()&#123;      return&#123;        message:&#39;&#39;,      &#125;    &#125;,    components:&#123;      componentA:&#123;        template:&#39;&lt;button @click=&quot;handleClick&quot;&gt;传递事件&lt;/button&gt;&#39;,        methods:&#123;          handleClick()&#123;            bus.$emit(&#39;on-message&#39;,&#39;来自子组件component-a的内容&#39;)          &#125;        &#125;      &#125;    &#125;,    mounted()&#123;      bus.$on(&#39;on-message&#39;,(msg)=&gt;&#123;        this.message=msg;      &#125;);    &#125;  &#125;&lt;/script&gt;`</code></pre><pre><code>以上例子中：首先创建了一个bus的空Vue实例，里面没有任何内容，然后全局定义了组件component-a,，在父组件ParentChild的生命周期mounted钩子函数中监听来自bus的事件on-message。而在组件component-a中，点击按钮会通过bus把事件on-message发出去，父组件会接受来自bus的事件，改变message的值。这种方法巧妙轻量的实现了任何组件之间的通信，包括父子，兄弟，跨级组件。</code></pre><h2 id="9-vuex"><a href="#9-vuex" class="headerlink" title="9. vuex"></a>9. vuex</h2><pre><code>在实际业务中，经常会有跨组件共享数据的需求，如果项目不复杂，使用bus就能简单的解决问题，但是使用bus在数据的管理、维护、架构设计上还只是一个简单的组件，在大型单页应用，多然开发的项目中，Vuex能更加优雅和高效的完成状态管理。![招不出](../pictures/vuex.png)</code></pre>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;平时在使用Vue框架的业务开发中，组件不仅仅要把模板的内容进行复用，更重要的是组件之间要进行通信。
组件之间通信分为三种：父-子；子-父；跨级组件通信。下面，就组件间如何通信做一些总结。
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="vue" scheme="http://example.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>el-tree复选框父子节点</title>
    <link href="http://example.com/2020/08/19/el-tree%E5%A4%8D%E9%80%89%E6%A1%86%E7%88%B6%E5%AD%90%E8%8A%82%E7%82%B9/"/>
    <id>http://example.com/2020/08/19/el-tree%E5%A4%8D%E9%80%89%E6%A1%86%E7%88%B6%E5%AD%90%E8%8A%82%E7%82%B9/</id>
    <published>2020-08-19T12:13:44.000Z</published>
    <updated>2020-08-19T12:18:42.425Z</updated>
    
    <content type="html"><![CDATA[<pre><code>element ui的el-tree多选树(复选框)父子节点关联不关联的问题，选中当前节点，他的子节点和父节点是否被选中.如何实际中Tree比较大，用ztree，vue-giant-tree就表现的很强悍了。</code></pre><span id="more"></span><h2 id="属性check-strictly"><a href="#属性check-strictly" class="headerlink" title="属性check-strictly"></a>属性check-strictly</h2><pre><code>官方文档提供属性check-strictly，在显示复选框的情况下，是否严格的遵循父子不互相关联的做法，默认为 false。</code></pre><h3 id="设置true，严格的遵循父子不互相关联。"><a href="#设置true，严格的遵循父子不互相关联。" class="headerlink" title="设置true，严格的遵循父子不互相关联。"></a>设置true，严格的遵循父子不互相关联。</h3><pre><code>1、当你通过函数设置勾选节点的时候，严格通过设置勾选的list中有无此节点来断定是否勾选。2、当你点击勾选复选框时候，无论点击的哪个节点只会改变当前节点的勾选状态，不存在半选状态。</code></pre><h3 id="系统的角色菜单控制的问题"><a href="#系统的角色菜单控制的问题" class="headerlink" title="系统的角色菜单控制的问题"></a>系统的角色菜单控制的问题</h3><pre><code>问题来了，在系统的角色菜单控制的时候，需要满足以下条件：1、当点击勾选复选框时候，若点击父节点，其下子节点全部统一跟随父节点变化。2、当点击勾选复选框时候，若点击子节点，子节点部分勾选时父节点处于半选状态，子节点全部勾选时父节点选中，子节点全部不勾选时父节点未选中。</code></pre><h2 id="需求问题"><a href="#需求问题" class="headerlink" title="需求问题"></a>需求问题</h2><pre><code>当属性check-strictly设置为true的时候，父子节点之间不关联。但大多数需求可能需要在选中父节点的时候，他的所有子节点都要被选中。当选中当前节点的时候，他的所有父节点和子节点都要被选中。</code></pre><h3 id="check-strictly-false，行不通"><a href="#check-strictly-false，行不通" class="headerlink" title="check-strictly=false，行不通"></a>check-strictly=false，行不通</h3><pre><code>按照需要满足的条件，明显靠近将check-strictly设置为false，于是从check-strictly=false父子互相关联的基础入手，需要解决的问题就是：将尚未全部勾选的子节点对应的父节点改为半勾选状态，但是查找文档良久无果。只有getHalfCheckedKeys和getHalfCheckedNodes，并没有设置成半勾选。</code></pre><h3 id="check-strictly-true，试一试"><a href="#check-strictly-true，试一试" class="headerlink" title="check-strictly=true，试一试"></a>check-strictly=true，试一试</h3><pre><code>只能试一下将check-strictly设置为true，从check-strictly=true严格的遵循父子不互相关联入手，需要解决的问题就是：1、当点击勾选复选框时候，若点击父节点，其下子节点全部统一跟随父节点变化。2、当点击勾选复选框时候，若点击子节点，子节点部分勾选时父节点处于半选状态，子节点全部勾选时父节点选中，子节点全部不勾选时父节点未选中。而在严格的父子不互相关联时，点击父子节点不会出现半选状态，也无法通过函数设置半选状态，无奈简化解决问题：1、当点击勾选复选框时候，若状态为 选中 ：1.1、其所有 父节点 （父节点、父节点的父节点以此类推）全部统一跟随当前节点变化为 选中 。1.2、其下 子节点 全部统一跟随父节点变化为 选中 。2、当点击勾选复选框时候，若状态为 未选中 ，其下 子节点 全部统一跟随父节点变化为 未选中 。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;el-tree</span><br><span class="line">     :data=<span class="string">&quot;resourceTree&quot;</span></span><br><span class="line">     ref=<span class="string">&quot;resourceTree&quot;</span></span><br><span class="line">     show-checkbox</span><br><span class="line">     node-key=<span class="string">&quot;id&quot;</span></span><br><span class="line">     :check-strictly=<span class="string">&quot;true&quot;</span> </span><br><span class="line">     v-loading=<span class="string">&quot;dialogLoading&quot;</span></span><br><span class="line">     @check=<span class="string">&quot;nodeClick&quot;</span></span><br><span class="line">     :props=<span class="string">&quot;defaultProps&quot;</span>&gt;</span><br><span class="line">   &lt;/el-tree&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nodeClick (currentObj, treeStatus) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(currentObj)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;=========&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(treeStatus)</span><br><span class="line">  <span class="comment">// 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。</span></span><br><span class="line">  <span class="keyword">let</span> selected = treeStatus.checkedKeys.indexOf(currentObj.id) <span class="comment">// -1未选中,&gt;=0为选中</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(selected)</span><br><span class="line">  <span class="comment">// 选中</span></span><br><span class="line">  <span class="keyword">if</span> (selected !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 子节点只要被选中父节点就被选中(需要选中父节点时候调用此方法)</span></span><br><span class="line">      <span class="built_in">this</span>.selectedParent(currentObj)</span><br><span class="line">      <span class="comment">// 统一处理子节点为相同的勾选状态</span></span><br><span class="line">      <span class="built_in">this</span>.uniteChildSame(currentObj, <span class="literal">true</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 未选中 处理子节点全部未选中</span></span><br><span class="line">      <span class="keyword">if</span> (currentObj.children.length !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.uniteChildSame(currentObj, <span class="literal">false</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一处理子节点为相同的勾选状态，当选中父节点的时候，把其所有子节点也选中</span></span><br><span class="line">uniteChildSame (treeList, isSelected) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;aaaaaaaaaaaaa&quot;</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(treeList);</span><br><span class="line">  <span class="built_in">this</span>.$refs.resourceTree.setChecked(treeList.id, isSelected)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; treeList.children.length; i++) &#123;</span><br><span class="line">    <span class="built_in">this</span>.uniteChildSame(treeList.children[i], isSelected)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 统选中当前节点，他的所有父节点都被选中,没有半选状态</span></span><br><span class="line">selectedParent (currentObj) &#123;</span><br><span class="line">  <span class="keyword">let</span> currentNode = <span class="built_in">this</span>.$refs.resourceTree.getNode(currentObj)</span><br><span class="line">  <span class="keyword">if</span> (currentNode.parent.key !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.resourceTree.setChecked(currentNode.parent, <span class="literal">true</span>)</span><br><span class="line">    <span class="built_in">this</span>.selectedParent(currentNode.parent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;element ui的el-tree多选树(复选框)父子节点关联不关联的问题，选中当前节点，他的子节点和父节点是否被选中.
如何实际中Tree比较大，用ztree，vue-giant-tree就表现的很强悍了。
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="zTree" scheme="http://example.com/tags/zTree/"/>
    
  </entry>
  
  <entry>
    <title>数据响应式原理剖析</title>
    <link href="http://example.com/2020/07/25/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <id>http://example.com/2020/07/25/%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</id>
    <published>2020-07-25T04:58:48.000Z</published>
    <updated>2020-08-19T12:28:28.375Z</updated>
    
    <content type="html"><![CDATA[<pre><code>数据响应式原理proxy，数据的渲染以及双向绑定的原理</code></pre><span id="more"></span><h2 id="Proxy代理与数据劫持"><a href="#Proxy代理与数据劫持" class="headerlink" title="Proxy代理与数据劫持"></a>Proxy代理与数据劫持</h2><pre><code>1. Handler.set()2. Handler.get()3. Handler...</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">name: <span class="string">&#x27;james&#x27;</span>,</span><br><span class="line">age: <span class="string">&#x27;30&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//box.innerHTML = data.age;</span></span><br><span class="line"><span class="comment">//data.age = 21;</span></span><br><span class="line"><span class="comment">//console.log(data);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target,prop,newValue</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;set...&#x27;</span>, target,prop,newValue);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;get...&#x27;</span>, target,prop);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.age = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="vue中的数据响应式实现"><a href="#vue中的数据响应式实现" class="headerlink" title="vue中的数据响应式实现"></a>vue中的数据响应式实现</h2><pre><code>1. 获取子元素2. 匹配内容规则3. 修改规则</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">&#123;&#123; name &#125;&#125;</span><br><span class="line">&lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;input v-model=<span class="string">&quot;test&quot;</span>&gt;</span><br><span class="line">&#123;&#123; test &#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">name: <span class="string">&#x27;james&#x27;</span>,</span><br><span class="line">message: <span class="string">&#x27;测试数据&#x27;</span>,</span><br><span class="line">test: <span class="string">&#x27;双绑数据&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//vm._data.name=&#x27;lebron&#x27;;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建一个js文件，在html中引入，js文件如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vue</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">option</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.option = option;</span><br><span class="line"><span class="built_in">this</span>._data = <span class="built_in">this</span>.option.data;</span><br><span class="line"><span class="built_in">this</span>.el = <span class="built_in">document</span>.querySelector(<span class="built_in">this</span>.option.el);</span><br><span class="line"><span class="built_in">this</span>.compileNode(<span class="built_in">this</span>.el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">compileNode</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> child = el.childNodes;</span><br><span class="line">[...child].forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(node.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//console.log(&#x27;这是一个文本节点&#x27;);</span></span><br><span class="line"><span class="keyword">let</span> text = node.textContent;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;\s*([^\s\&#123;\&#125;]+)\s*\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="keyword">if</span>(reg.test(text)) &#123;</span><br><span class="line"><span class="keyword">let</span> $<span class="number">1</span> = <span class="built_in">RegExp</span>.$1;</span><br><span class="line"><span class="built_in">this</span>._data[$<span class="number">1</span>] &amp;&amp; (node.textContent = text.replace(reg, <span class="built_in">this</span>._data[$<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.compileNode(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="vue中双向绑定实现"><a href="#vue中双向绑定实现" class="headerlink" title="vue中双向绑定实现"></a>vue中双向绑定实现</h2><pre><code>1. 监控数据变化2. 通过自定义事件通知3. 修改规则</code></pre><p>接下来继续写js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> <span class="keyword">extends</span> <span class="title">EventTarget</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">option</span>)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>();</span><br><span class="line"><span class="built_in">this</span>.option = option;</span><br><span class="line"><span class="built_in">this</span>._data = <span class="built_in">this</span>.option.data;</span><br><span class="line"><span class="built_in">this</span>.el = <span class="built_in">document</span>.querySelector(<span class="built_in">this</span>.option.el);</span><br><span class="line"><span class="built_in">this</span>.observe(<span class="built_in">this</span>._data);</span><br><span class="line"><span class="built_in">this</span>.compileNode(<span class="built_in">this</span>.el);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">observe</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> _this = <span class="built_in">this</span>;</span><br><span class="line"><span class="built_in">this</span>._data = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target,prop,newValue</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(newValue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> event = <span class="keyword">new</span> CustomEvent(prop, &#123;</span><br><span class="line">detail: newValue</span><br><span class="line">&#125;);</span><br><span class="line">_this.dispatchEvent(event);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(...arguments);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">compileNode</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> child = el.childNodes;</span><br><span class="line">[...child].forEach(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(node.nodeType === <span class="number">3</span>) &#123;</span><br><span class="line"><span class="comment">//console.log(&#x27;这是一个文本节点&#x27;);</span></span><br><span class="line"><span class="keyword">let</span> text = node.textContent;</span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;\s*([^\s\&#123;\&#125;]+)\s*\&#125;\&#125;/g</span>;</span><br><span class="line"><span class="keyword">if</span>(reg.test(text)) &#123;</span><br><span class="line"><span class="keyword">let</span> $<span class="number">1</span> = <span class="built_in">RegExp</span>.$1;</span><br><span class="line"><span class="built_in">this</span>._data[$<span class="number">1</span>] &amp;&amp; (node.textContent = text.replace(reg, <span class="built_in">this</span>._data[$<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.addEventListener($<span class="number">1</span>, <span class="function"><span class="params">e</span>=&gt;</span> &#123;</span><br><span class="line">node.textContent = text.replace(reg, e.detail);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> attr = node.attributes;</span><br><span class="line"><span class="built_in">console</span>.log(attr);</span><br><span class="line"><span class="keyword">if</span>(attr.hasOwnProperty(<span class="string">&#x27;v-model&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">let</span> keyName = attr[<span class="string">&#x27;v-model&#x27;</span>].nodeValue;</span><br><span class="line"><span class="built_in">console</span>.log(keyName);</span><br><span class="line">node.value = <span class="built_in">this</span>._data[keyName];</span><br><span class="line">node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._data[keyName] = node.value;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.compileNode(node);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;数据响应式原理proxy，数据的渲染以及双向绑定的原理
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="js, vue" scheme="http://example.com/tags/js-vue/"/>
    
  </entry>
  
  <entry>
    <title>this指向详解</title>
    <link href="http://example.com/2020/07/21/this%E6%8C%87%E5%90%91%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2020/07/21/this%E6%8C%87%E5%90%91%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-07-21T14:01:40.000Z</published>
    <updated>2020-08-19T12:28:55.827Z</updated>
    
    <content type="html"><![CDATA[<pre><code>变化莫测的this指向</code></pre><span id="more"></span><h2 id="function中的this在不同环境下的指向"><a href="#function中的this在不同环境下的指向" class="headerlink" title="function中的this在不同环境下的指向"></a>function中的this在不同环境下的指向</h2><h3 id="事件调用环境中，"><a href="#事件调用环境中，" class="headerlink" title="事件调用环境中，"></a>事件调用环境中，</h3><pre><code>       谁触发事件，函数里面的this指向的就是谁</code></pre><h3 id="全局环境下，"><a href="#全局环境下，" class="headerlink" title="全局环境下，"></a>全局环境下，</h3><pre><code>       浏览器环境指的的window，node环境中是module.exports</code></pre><h3 id="函数内部"><a href="#函数内部" class="headerlink" title="函数内部"></a>函数内部</h3><pre><code>1 this最终指向的是调用它的对象，和它的声明没有关系。    普通函数直接调用与window调用    对象中的函数直接调用与window调用2 函数被多层对象所包含，如果函数被最外层对象调用，this指向的也只是它上一级的对象。    多层对象中的函数的this指向。    对象中的函数被赋值给另一个变量</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">a: <span class="number">10</span>;</span><br><span class="line">b: &#123;</span><br><span class="line">fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> abc = obj.b.fn;</span><br><span class="line"><span class="built_in">window</span>.obj.b.fn(); <span class="comment">//b</span></span><br><span class="line">abc(); <span class="comment">//window，调用它的是window，与它的声明没有关系</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>3 构造函数中的this指向的是实例对象。    构造函数中的this指向。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn.num = <span class="number">20</span>;</span><br><span class="line">fn.prototype.num = <span class="number">30</span>;</span><br><span class="line">fn.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> prototype = fn.prototype;</span><br><span class="line"><span class="keyword">var</span> method = prototype.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> fn().method(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">prototype.method(); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">method(); <span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>    new运算符的作用        a. 调用函数        b. 自动创建一个对象        c. 把创建出来的对象和this进行绑定        d. 如果构造函数没有返回值，隐式返回this对象4 如果构造函数中有return，如果return的值是对象，this指向返回的对象，如果不是对象，  则this指向保持原来的规则，在这里，null比较特殊，null也是对象，但还是保持原来的规则。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">this</span>.num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> fn();</span><br><span class="line"><span class="built_in">console</span>.log(obj.num);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="箭头函数中的this指向的特殊性"><a href="#箭头函数中的this指向的特殊性" class="headerlink" title="箭头函数中的this指向的特殊性"></a>箭头函数中的this指向的特殊性</h2><pre><code>箭头函数本身是没有this和arguments的，箭头函数的this指向在定义的时候就决定了，在箭头函数中引用this实际上调用的是定义的上一层作用域的this。这里需要注意的是上一层作用域，因对对象是不能形成独立的作用域的。总之来说箭头函数修复了this指向，指向上下文。</code></pre><h2 id="如何改变this指向"><a href="#如何改变this指向" class="headerlink" title="如何改变this指向"></a>如何改变this指向</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> box = &#123;</span><br><span class="line">color: <span class="string">&#x27;blue&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a,b,c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.fn.bind(box)(); <span class="comment">//&#123;color: &quot;blue&quot;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>call(this,a,b,c);apply(this, [a,b,c]);bind(this,a,b,c)(); //bind会创建一个函数的实例，其this值会被绑定到传给bind()函数的值。console.log(this);这样来扩充函数赖以运行的作用域</code></pre>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;变化莫测的this指向
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue源码解析</title>
    <link href="http://example.com/2019/10/15/vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2019/10/15/vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2019-10-15T14:37:08.000Z</published>
    <updated>2020-08-19T12:29:21.844Z</updated>
    
    <content type="html"><![CDATA[<pre><code>深入理解vue底层原理,手写vue核心部分实现,vue工作机制,Vue响应式的原理,依赖收集与追踪,编译compile</code></pre><span id="more"></span><h2 id="vue工作机制"><a href="#vue工作机制" class="headerlink" title="vue工作机制"></a>vue工作机制</h2><p><img src="E:\hexo\source\_posts\pictures/vue1.png" alt="招不出"></p><h2 id="Vue响应式的原理defineProperty"><a href="#Vue响应式的原理defineProperty" class="headerlink" title="Vue响应式的原理defineProperty"></a>Vue响应式的原理defineProperty</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KVue</span> </span>&#123;</span><br><span class="line">constructor(options) &#123;</span><br><span class="line"><span class="keyword">this</span>._data = options.data;</span><br><span class="line"><span class="keyword">this</span>.observer(<span class="keyword">this</span>._data);</span><br><span class="line">&#125;</span><br><span class="line">observer(value) &#123;</span><br><span class="line"><span class="keyword">if</span> (!value || typeof value !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Object.keys(value).forEach(key =&gt; &#123;</span><br><span class="line"><span class="keyword">this</span>.defineReactive(value, key, value[key]);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">defineReactive(obj, key, val) &#123;</span><br><span class="line">Object.defineProperty(obj, key, &#123;</span><br><span class="line">enumerable: <span class="keyword">true</span> <span class="comment">/* 属性可枚举 */</span>,</span><br><span class="line">configurable: <span class="keyword">true</span> <span class="comment">/* 属性可被修改或删除 */</span>,</span><br><span class="line">get() &#123;</span><br><span class="line"><span class="keyword">return</span> val;</span><br><span class="line">&#125;,</span><br><span class="line">set(newVal) &#123;</span><br><span class="line"><span class="keyword">if</span> (newVal === val) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">this</span>.cb(newVal);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">cb(val) &#123;</span><br><span class="line">console.log(<span class="string">&quot;更新数据了&quot;</span>, val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let o = <span class="keyword">new</span> KVue(&#123;</span><br><span class="line">data: &#123;</span><br><span class="line">test: <span class="string">&quot;I am test.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">o._data.test = <span class="string">&quot;hello,kaikeba&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="依赖收集与追踪"><a href="#依赖收集与追踪" class="headerlink" title="依赖收集与追踪"></a>依赖收集与追踪</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">template:</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;text1&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;text2&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;,</span><br><span class="line">data: &#123;</span><br><span class="line">text1: <span class="string">&#x27;name1&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line"><span class="keyword">this</span>.text1=<span class="string">&quot;刘思涵&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>text1被修改，所以视图更新，但是text2视图没有用到，所以不需要更新，如何实现呢，就需要用到依赖收集了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依赖收集</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">constructor () &#123;</span><br><span class="line"><span class="comment">//存放所有的依赖</span></span><br><span class="line"><span class="keyword">this</span>.deps =[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在deps中添加一个监听器对象</span></span><br><span class="line">addDep(dep) &#123;</span><br><span class="line"><span class="keyword">this</span>.deps.push(dep)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知所有监听器去更新视图</span></span><br><span class="line">notify() &#123;</span><br><span class="line"><span class="keyword">this</span>.deps.forEach((dep)=&gt; &#123;</span><br><span class="line">dep.update()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">watcher</span> </span>&#123;</span><br><span class="line">constructor () &#123;</span><br><span class="line"><span class="comment">//在new一个监听器对象时将该对象赋值给Dep.target,在get中会用到</span></span><br><span class="line">Dep.target = <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新视图的方法</span></span><br><span class="line">update () &#123;</span><br><span class="line">console.log(<span class="string">&quot;视图更新了&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\hexo\source\_posts\pictures/vue2.png" alt="刘思涵"></p><p>我们在增加了一个 Dep 类的对象，用来收集 Watcher 对象。读数据的时候，会触发 reactiveGetter 函数把当前的<br>Watcher 对象（存放在 Dep.target 中）收集到 Dep 类中去。<br>写数据的时候，则会触发 reactiveSetter 方法，通知Dep 类调用 notify 来触发所有 watcher 对象的update 方法更 新对应视图</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">option</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>._data = option.data</span><br><span class="line"><span class="built_in">this</span>.observe(<span class="built_in">this</span>._data)</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个Watcher观察者对象，这时候Dep.target会指向这个Watcher对象</span></span><br><span class="line"><span class="keyword">new</span> Watcher();</span><br><span class="line"><span class="comment">//  在这里模拟render的过程，为了触发test属性的get函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;模拟render, 触发test的getter&#x27;</span>, <span class="built_in">this</span>._data.test);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">defineReactive</span>(<span class="params">obj, key, val</span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">enumerable: <span class="literal">true</span>,</span><br><span class="line">configurable: <span class="literal">true</span>,</span><br><span class="line">get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//  将Dep.target（即当前的Watcher对象存入Dep的deps中）</span></span><br><span class="line">dep.addDep(Dep.target)</span><br><span class="line"><span class="keyword">return</span> val</span><br><span class="line">&#125;,</span><br><span class="line">set: funciton <span class="function"><span class="title">reactiveSetter</span>(<span class="params">newval</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(newval === val)  <span class="keyword">return</span></span><br><span class="line"><span class="comment">//  在set的时候触发dep的notify来通知所有的Watcher对象更新视图</span></span><br><span class="line">dep.notify()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译compile"><a href="#编译compile" class="headerlink" title="编译compile"></a>编译compile</h2><p><img src="E:\hexo\source\_posts\pictures/vue3.png" alt="招不出"></p><h2 id="compile-js"><a href="#compile-js" class="headerlink" title="compile.js"></a>compile.js</h2><h2 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h2><h2 id="依赖收集Dep"><a href="#依赖收集Dep" class="headerlink" title="依赖收集Dep"></a>依赖收集Dep</h2><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;深入理解vue底层原理,手写vue核心部分实现,vue工作机制,Vue响应式的原理,依赖收集与追踪,编译compile
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="vuejs" scheme="http://example.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>ES6特性总结学习</title>
    <link href="http://example.com/2019/09/30/ES6%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2019/09/30/ES6%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-09-29T16:01:27.000Z</published>
    <updated>2020-08-19T12:29:59.483Z</updated>
    
    <content type="html"><![CDATA[<p>  在React中，数据在组件中是单向流动的，数据从一个方向父组件流向子组件（通过props）,<br>  所以，两个非父子组件之间通信就相对麻烦，redux的出现就是为了解决state里面的数据问题</p><span id="more"></span><p>1.变量<br>  var     重复声明、函数级<br>  let     不能重复声明、块级作用域、变量<br>  const   不能重复声明、块级作用域、常量</p><p>2.箭头函数<br>  a.方便<br>    i.如果只有一个参数，()可以省<br>    ii.如果只有一个return，{}也可以省<br>  b.修正this<br>    this相对正常点，this指向的是上下文作用域，和普通的函数是不一样的</p><p>3.参数扩展…arg<br>  收集<br>  扩展</p><p>  默认参数<br>    function show(a, b=5){</p><pre><code>&#125;</code></pre><p>4.数组方法<br>  map       映射<br>  reduce    汇总：一堆-&gt;一个<br>  filter    过滤：一堆-&gt;剩下的<br>  forEach   循环</p><p>5.字符串<br>  startsWith/endsWith<br>  字符串模板：<code>$&#123;a&#125;xxx$&#123;b&#125;</code></p><p>6.Promise<br>  封装异步操作</p><p>  Promise.all([]);</p><p>7.generator</p><p>  function *show(){<br>    yield<br>  }</p><p>8.JSON<br>  JSON.stringify({a:12,b:5})  =&gt;  ‘{“a”:12,”b”:5}’<br>  JSON.parse(‘{“a”:12,”b”:5}’)=&gt;  {a:12,b:5}</p><p>9.解构赋值<br>  let [a,b,c]=[12,5,8];</p><p>  左右结构一样<br>  右边是个合法的东西<br>  声明、赋值一次完成</p><p>10.面向对象<br>  class Test{<br>    constructor(){<br>      this.xxx=<br>    }</p><pre><code>方法1()&#123;&#125;方法2()&#123;&#125;</code></pre><p>  }</p><p>  class Cls2 extends Cls1{<br>    constructor(){<br>      super();<br>    }<br>  }</p><p>11 map和set的区别</p><p>   set结构类似于数组结构，它的成员都是不重复的值</p><p>   map结构类似于哈希结构，是键值对集合，关键区别在于map结构的值不是它的键，它的键和值是分开的</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;  在React中，数据在组件中是单向流动的，数据从一个方向父组件流向子组件（通过props）,&lt;br&gt;  所以，两个非父子组件之间通信就相对麻烦，redux的出现就是为了解决state里面的数据问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="http://example.com/2019/09/21/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://example.com/2019/09/21/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2019-09-20T16:30:08.000Z</published>
    <updated>2019-09-20T17:05:24.364Z</updated>
    
    <content type="html"><![CDATA[<p>求一个字符串内的最大回文子串及其长度，这是一道残酷的笔试题</p><span id="more"></span><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><p>从字符串第一个字符开始，然后看它的左边和右边是否相等，当然第一个字符，回文数就是1。</p><p>然后第二个字符作为中心，它的左边，第一个字符，它的右边，第三个字符，看这两个字符是否相等，若相等，回文长度就是</p><p> 3=2*1+2了，继续往左的话就没有字符了退出本次循环。</p><p>紧接着中心字符变成第三个字符，再来看看以第三个字符为中心是不是回文的，如果是，则更新回文。</p><p>这里用了两个循环嵌套的，第一个循环用来从头到尾遍历字符串，把每个字符串作为中心元素，然后嵌套循环里看以他为中心是否是回文。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>], s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">int</span> n,m=<span class="number">0</span>,max=<span class="number">0</span>,x,y;</span><br><span class="line">    fgets(buf, <span class="keyword">sizeof</span>(s), <span class="built_in">stdin</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(buf);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p[m]=i;</span><br><span class="line">        s[m++]=<span class="built_in">toupper</span>(buf[i]); <span class="comment">//动态规划</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// i看成是中心元素，然后i-j是左边，i+j是右边元素，比较这两个元素是否相等  </span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;i-j&gt;=<span class="number">0</span>&amp;&amp;i+j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i-j]!=s[i+j])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(j*<span class="number">2</span>+<span class="number">1</span>&gt;max)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//如果J*2+1的值大于最大记录的回文长度，更新最大记录</span></span><br><span class="line">                max = j*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">                x=p[i-j];</span><br><span class="line">                y=p[i+j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;i-j&gt;=<span class="number">0</span>&amp;&amp;i+j+<span class="number">1</span>&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">// 同理在偶数长度时，回文长度为2*j+2  </span></span><br><span class="line">            <span class="keyword">if</span>(s[i-j]!=s[i+j+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(j*<span class="number">2</span>+<span class="number">2</span>&gt;max)</span><br><span class="line">            &#123;</span><br><span class="line">                max = j*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">                x=p[i-j];</span><br><span class="line">                y=p[i+j+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=x;i&lt;=y;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, buf[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="解法二，动态规划"><a href="#解法二，动态规划" class="headerlink" title="解法二，动态规划"></a>解法二，动态规划</h2><p>这方法是网上看到的，不太好理解，不过也有点意思。<br>思想：DP的考虑源于暴力方法，暴力方法是寻找一个字符串的所有子串，需要O(n^2)的开销，然后对于每一个子串需要O(n)的开销来判断是否是回文，故暴力方案为O(n^3)，但是这里有一个问题，就是在暴力的时候有重复判断；</p><p>如果子串X为回文，那么sXs也是回文；如果X不是回文，那么sXs也不是回文；另外，ss也是回文。所以这里使用DP我们可以按照子串长度从小到大的顺序来构建DP状态数组，使用一个二维数组dp[i][j]记录子串[i-j]是否为回文子串，那么我们就有初始化和自底向上的方案了；</p><p>初始化：单字符串和相等的双字符串为回文</p><p>自底向上构造：X[i]==X[j] &amp;&amp; dp[i+1][j-1]==1 则dp[i][j] = 1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">string longestPalindromeDP(string s)</span><br><span class="line">&#123;</span><br><span class="line">    int n &#x3D; s.length();</span><br><span class="line">    int longestBegin &#x3D; 0, maxLen &#x3D; 1;</span><br><span class="line">    bool table[1000][1000] &#x3D; &#123;false&#125;;</span><br><span class="line">    for (int i&#x3D;0; i&lt;n; i++)</span><br><span class="line">        table[i][i] &#x3D; true;</span><br><span class="line">    for (int i&#x3D;0; i&lt;n-1; i++) &#123;</span><br><span class="line">        if (s[i] &#x3D;&#x3D; s[i+1]) &#123;</span><br><span class="line">            table[i][i+1] &#x3D; true;</span><br><span class="line">            longestBegin &#x3D; i;</span><br><span class="line">            maxLen &#x3D; 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        &#x2F;*依次求table[i][i+2]...table[i][i+n-1]等*&#x2F;</span><br><span class="line">    for (int len&#x3D;3; len&lt;&#x3D;n; ++len) &#123;</span><br><span class="line">        for (int i&#x3D;0; i&lt;n-len+1; ++i) &#123;</span><br><span class="line">            int j &#x3D; i + len - 1;</span><br><span class="line">            if (s[i]&#x3D;&#x3D;s[j] &amp;&amp; table[i+1][j-1]) &#123;</span><br><span class="line">                table[i][j] &#x3D; true;</span><br><span class="line">                longestBegin &#x3D; i;</span><br><span class="line">                maxLen &#x3D; len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return s.substr(longestBegin, maxLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;求一个字符串内的最大回文子串及其长度，这是一道残酷的笔试题&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>js基础</title>
    <link href="http://example.com/2019/09/18/js%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2019/09/18/js%E5%9F%BA%E7%A1%80/</id>
    <published>2019-09-18T15:03:15.000Z</published>
    <updated>2019-09-25T15:33:54.483Z</updated>
    
    <content type="html"><![CDATA[<p>面试中需要知道的一点js基础<br><span id="more"></span></p><h2 id="怎样添加、移除、移动、复制、创建和查找节点？"><a href="#怎样添加、移除、移动、复制、创建和查找节点？" class="headerlink" title="怎样添加、移除、移动、复制、创建和查找节点？"></a>怎样添加、移除、移动、复制、创建和查找节点？</h2><h3 id="创建新节点"><a href="#创建新节点" class="headerlink" title="创建新节点"></a>创建新节点</h3><p>createDocumentFragment() //创建一个DOM片段<br>createElement() //创建一个具体的元素<br>createTextNode() //创建一个文本节点</p><h3 id="添加、移除、替换、插入"><a href="#添加、移除、替换、插入" class="headerlink" title="添加、移除、替换、插入"></a>添加、移除、替换、插入</h3><p>appendChild() //添加<br>removeChild() //移除<br>replaceChild() //替换<br>insertBefore() //插入</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>getElementsByTagName() //通过标签名称<br>getElementsByName() //通过元素的Name属性的值<br>getElementById() //通过元素Id，唯一性</p><h2 id="实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。"><a href="#实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。" class="headerlink" title="实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。"></a>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制。</h2><p>  /**</p><ul><li>对象克隆</li><li>支持基本数据类型及对象</li><li><p>递归方法<br>*/</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> obj) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;undefined&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;string&quot;</span>:</span><br><span class="line">            o = obj + <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;number&quot;</span>:</span><br><span class="line">            o = obj - <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;boolean&quot;</span>:</span><br><span class="line">            o = obj;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;object&quot;</span>: <span class="comment">// object 分为两种情况 对象（Object）或数组（Array）</span></span><br><span class="line">            <span class="keyword">if</span> (obj === <span class="literal">null</span>) &#123;</span><br><span class="line">                o = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(obj).slice(<span class="number">8</span>, -<span class="number">1</span>) === <span class="string">&quot;Array&quot;</span>) &#123;</span><br><span class="line">                    o = [];</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i  obj.length; i++) &#123;</span><br><span class="line">                        o.push(clone(obj[i]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    o = &#123;&#125;;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">                        o[k] = clone(obj[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            o = obj;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="判断一个字符串出现次数最多的字符，统计这个次数并输出"><a href="#判断一个字符串出现次数最多的字符，统计这个次数并输出" class="headerlink" title="判断一个字符串出现次数最多的字符，统计这个次数并输出"></a>判断一个字符串出现次数最多的字符，统计这个次数并输出</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function count(str)&#123;</span><br><span class="line">    var max &#x3D; 0; </span><br><span class="line">    var obj &#x3D; &#123;&#125;;</span><br><span class="line">    var maxStr &#x3D; &#39;&#39;;</span><br><span class="line">    for(var i &#x3D; 0; i &lt; str.length; i++)&#123;</span><br><span class="line">        var charAt &#x3D; str.charAt(i);</span><br><span class="line">        if(obj[charAt])&#123;</span><br><span class="line">            obj[charAt]++;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            obj[charAt]&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(let i in obj)&#123;</span><br><span class="line">          if(obj[i]&gt;max)&#123;</span><br><span class="line">            max &#x3D; obj[i];</span><br><span class="line">            maxStr &#x3D; i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    return maxStr +&#39;,&#39;+&#39;出现&#39;+max+&#39;次&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何消除一个数组里面重复的元素？"><a href="#如何消除一个数组里面重复的元素？" class="headerlink" title="如何消除一个数组里面重复的元素？"></a>如何消除一个数组里面重复的元素？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr1 &#x3D;[1,2,2,2,3,3,3,4,5,6],</span><br><span class="line">    arr2 &#x3D; [];</span><br><span class="line">for(var i &#x3D; 0,len &#x3D; arr1.length; i&lt; len; i++)&#123;</span><br><span class="line">    if(arr2.indexOf(arr1[i]) &lt; 0)&#123;</span><br><span class="line">        arr2.push(arr1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">document.write(arr2); &#x2F;&#x2F; 1,2,3,4,5,6</span><br></pre></td></tr></table></figure><h2 id="想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）。"><a href="#想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）。" class="headerlink" title="想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）。"></a>想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）。</h2><h2 id="在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"><a href="#在Javascript中什么是伪数组？如何将伪数组转化为标准数组？" class="headerlink" title="在Javascript中什么是伪数组？如何将伪数组转化为标准数组？"></a>在Javascript中什么是伪数组？如何将伪数组转化为标准数组？</h2><p>伪数组（类数组）：无法直接调用数组方法或期望length属性有什么特殊的行为，但仍可以对真正数组遍历方法来遍历它们。典型的是函数的argument参数，还有像调用getElementsByTagName,document.childNodes之类的,它们都返回NodeList对象都属于伪数组。可以使用Array.prototype.slice.call(fakeArray)将数组转化为真正的Array对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function log()&#123;</span><br><span class="line">      var args &#x3D; Array.prototype.slice.call(arguments);  </span><br><span class="line">   &#x2F;&#x2F;为了使用unshift数组方法，将argument转化为真正的数组</span><br><span class="line">      args.unshift(&#39;(app)&#39;);</span><br><span class="line"> </span><br><span class="line">      console.log.apply(console, args);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="Javascript中callee和caller的作用？"><a href="#Javascript中callee和caller的作用？" class="headerlink" title="Javascript中callee和caller的作用？"></a>Javascript中callee和caller的作用？</h2><p>caller是返回一个对函数的引用，该函数调用了当前函数；</p><p>callee是返回正在被执行的function函数，也就是所指定的function对象的正文。</p><h2 id="请描述一下cookies，sessionStorage和localStorage的区别"><a href="#请描述一下cookies，sessionStorage和localStorage的区别" class="headerlink" title="请描述一下cookies，sessionStorage和localStorage的区别"></a>请描述一下cookies，sessionStorage和localStorage的区别</h2><p>sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p><p>web storage和cookie的区别</p><p>Web Storage的概念和cookie相似，区别是它是为了更大容量存储设计的。Cookie的大小是受限的，并且每次你请求一个新的页面的时候Cookie都会被发送过去，这样无形中浪费了带宽，另外cookie还需要指定作用域，不可以跨域调用。<br>除此之外，Web Storage拥有setItem,getItem,removeItem,clear等方法，不像cookie需要前端开发者自己封装setCookie，getCookie。但是Cookie也是不可以或缺的：Cookie的作用是与服务器进行交互，作为HTTP规范的一部分而存在 ，而Web Storage仅仅是为了在本地“存储”数据而生。</p><h2 id="手写数组快速排序"><a href="#手写数组快速排序" class="headerlink" title="手写数组快速排序"></a>手写数组快速排序</h2><p>关于快排算法的详细说明，可以参考阮一峰老师的文章快速排序<br>“快速排序”的思想很简单，整个排序过程只需要三步：<br>（1）在数据集之中，选择一个元素作为”基准”（pivot）。<br>（2）所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>（3）对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p><h2 id="统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。"><a href="#统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。" class="headerlink" title="统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。"></a>统计字符串”aaaabbbccccddfgh”中字母个数或统计最多字母数。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;aaaabbbccccddfgh&quot;;</span><br><span class="line">var obj  &#x3D; &#123;&#125;;</span><br><span class="line">for(var i&#x3D;0;istr.length;i++)&#123;</span><br><span class="line">    var v &#x3D; str.charAt(i);</span><br><span class="line">    if(obj[v] &amp; obj[v].value &#x3D;&#x3D; v)&#123;</span><br><span class="line">        obj[v].count &#x3D; ++ obj[v].count;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        obj[v] &#x3D; &#123;&#125;;</span><br><span class="line">        obj[v].count &#x3D; 1;</span><br><span class="line">        obj[v].value &#x3D; v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">for(key in obj)&#123;</span><br><span class="line">    document.write(obj[key].value +&#39;&#x3D;&#39;+obj[key].count+&#39; &#39;); &#x2F;&#x2F; a&#x3D;4  b&#x3D;3  c&#x3D;4  d&#x3D;2  f&#x3D;1  g&#x3D;1  h&#x3D;1 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个function，清除字符串前后的空格。（兼容所有浏览器）"><a href="#写一个function，清除字符串前后的空格。（兼容所有浏览器）" class="headerlink" title="写一个function，清除字符串前后的空格。（兼容所有浏览器）"></a>写一个function，清除字符串前后的空格。（兼容所有浏览器）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function trim(str) &#123;</span><br><span class="line">    if (str &amp; typeof str &#x3D;&#x3D;&#x3D; &quot;string&quot;) &#123;</span><br><span class="line">        return str.replace(&#x2F;(^s*)|(s*)$&#x2F;g,&quot;&quot;); &#x2F;&#x2F;去除前后空白符</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;面试中需要知道的一点js基础&lt;br&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ES6系列之异步处理</title>
    <link href="http://example.com/2019/09/18/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2019/09/18/ES6%E7%B3%BB%E5%88%97%E4%B9%8B%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86/</id>
    <published>2019-09-17T16:55:59.000Z</published>
    <updated>2019-10-15T16:29:10.697Z</updated>
    
    <content type="html"><![CDATA[<p>为了实现异步，会简单用到几个Nodejs的API，</p><span id="more"></span><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><p>为了实现异步，会简单用到几个Nodejs的API，</p><h3 id="fs-readdir"><a href="#fs-readdir" class="headerlink" title="fs.readdir"></a>fs.readdir</h3><p>readdir方法用于读取目录，返回一个包含文件和目录的数组。</p><h3 id="fs-stat"><a href="#fs-stat" class="headerlink" title="fs.stat"></a>fs.stat</h3><p>stat方法的参数是一个文件或目录，它产生一个对象，该对象包含了该文件或目录的具体信息。此外，该对象还有一个IsFile()方法可以判断正在处理的到底是一个文件，还是一个目录</p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们基本的实现思路就是:</p><p>用fs.readdir获取指定目录的内容信息<br>循环遍历内容信息，使用fs.stat获取该文件或者目录的具体信息<br>将具体信息储存起来<br>当全部储存起来后，筛选其中的是文件的信息<br>遍历比较，找出最大文件<br>获取并返回最大文件</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargest</span>(<span class="params">dir, cb</span>) </span>&#123;</span><br><span class="line"><span class="comment">//读取目录下的所有文件</span></span><br><span class="line">fs.readdir(dir, <span class="function"><span class="keyword">function</span>(<span class="params">er, files</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (er)</span><br><span class="line"><span class="keyword">return</span> cb(er)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> counter = files.length;</span><br><span class="line"><span class="keyword">var</span> errored = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> stats = [];</span><br><span class="line"></span><br><span class="line">files.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file, index</span>)</span>&#123;</span><br><span class="line"><span class="comment">//读取文件信息</span></span><br><span class="line">fs.stat(path.join(dir, file), <span class="function"><span class="keyword">function</span>(<span class="params">er, stat</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(errored) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(er) &#123;</span><br><span class="line">errored = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> cb(er);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stats[index] = stat;</span><br><span class="line"></span><br><span class="line"><span class="comment">//事先算好有多少个文件，读完1个文件信息，计数减1，当为0时，说明读取完毕</span></span><br><span class="line"><span class="keyword">if</span>(--counter == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> largest = stats</span><br><span class="line">.filter(<span class="function"><span class="keyword">function</span>(<span class="params">stat</span>) </span>&#123; <span class="keyword">return</span> stat.isFile() &#125;)</span><br><span class="line">.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(prev.size &gt; next.size) <span class="keyword">return</span> prev</span><br><span class="line"><span class="keyword">return</span> next</span><br><span class="line"> &#125;)</span><br><span class="line"> cb(<span class="literal">null</span>, files[stats.indexOf(largest)])</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找当前目录最大的文件</span></span><br><span class="line">findLargest(<span class="string">&#x27;./&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">er, filename</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(er) <span class="keyword">return</span> <span class="built_in">console</span>.error(er)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;largetst file was:&#x27;</span>, filename)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>promise的特点：<br>    promise的状态一旦发生改变就无法更改<br>    promise的then方法的参数期望是函数，传入非函数则会发生值穿透<br>    promise的回调是同步的，而then的回调是异步<br>    链式调用then，上一个then的返回值是下一个then接收到的参数，如果返回错误，返回一个状态为reject的promise<br>    then的回调里return一个promise会进入等待状态，直到return的promise改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readDir = <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">fs.readdir(dir, <span class="function"><span class="keyword">function</span>(<span class="params">err, files</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) reject(err);</span><br><span class="line">resolve(files)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stat = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">fs.stat(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) reject(err)</span><br><span class="line">resolve(stat)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLargest</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> readDir(dir)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">files</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> promises = files.map(<span class="function"><span class="params">file</span> =&gt;</span> stat(path.join(dir, file)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">stats</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123; stats, files &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> largest = data.stats</span><br><span class="line">.filter(<span class="function"><span class="keyword">function</span>(<span class="params">stat</span>)</span>&#123; <span class="keyword">return</span> stat.isFile() &#125;)</span><br><span class="line">.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(prev.size &gt; next.size) <span class="keyword">return</span> prev</span><br><span class="line"><span class="keyword">return</span> next</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> data.files[data.stats.indexOf(largest)]</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">findLargest(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;largest file was:&#x27;</span>, filename);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> co = <span class="built_in">require</span>(<span class="string">&#x27;co&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readDir = <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">fs.readdir(dir, <span class="function"><span class="keyword">function</span>(<span class="params">err, files</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) reject(err)</span><br><span class="line">resolve(files)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stat = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">fs.stat(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) reject(err)</span><br><span class="line">resolve(stat)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">findLargest</span>(<span class="params">dir</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> files = <span class="keyword">yield</span> readDir(dir);</span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">yield</span> files.map(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> stat(path.join(dir, file))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> largest = stats</span><br><span class="line">.filter(<span class="function"><span class="keyword">function</span>(<span class="params">stat</span>)</span>&#123; <span class="keyword">return</span> stat.isFile() &#125;)</span><br><span class="line">.reduce(<span class="function">(<span class="params">prev, next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (prev.size &gt; next.size) <span class="keyword">return</span> prev</span><br><span class="line"><span class="keyword">return</span> next</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> files[stats.indexOf(largest)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">co(findLargest, <span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;largest file was&#x27;</span>, filename);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)；</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readDir = <span class="function"><span class="keyword">function</span>(<span class="params">dir</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">fs.readdir(dir, <span class="function"><span class="keyword">function</span>(<span class="params">err, files</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) reject(err);</span><br><span class="line">resolve(files)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stat = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">fs.stat(path, <span class="function"><span class="keyword">function</span>(<span class="params">err, path</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) reject(err);</span><br><span class="line">resolve(stat)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">findLargest</span>(<span class="params">dir</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> files = <span class="keyword">await</span> readDir(dir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promises = files.map(<span class="function"><span class="params">file</span> =&gt;</span> stat(path.join(dir, file)))</span><br><span class="line"><span class="keyword">var</span> stats = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(promises)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> largest = stats</span><br><span class="line">.filter(<span class="function"><span class="keyword">function</span>(<span class="params">stat</span>)</span>&#123; <span class="keyword">return</span> stat.isFile() &#125;)</span><br><span class="line">.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(prev.size &gt; next.size) <span class="keyword">return</span> prev</span><br><span class="line"><span class="keyword">return</span> next</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> files[stats.indexOf(largest)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">findLargest(<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;largest file was:&#x27;</span>, filename);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了实现异步，会简单用到几个Nodejs的API，&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>ES6使用getter和setter来控制对象的访问</title>
    <link href="http://example.com/2019/09/17/ES6%E4%BD%BF%E7%94%A8getter%E5%92%8Csetter%E6%9D%A5%E6%8E%A7%E5%88%B6%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE/"/>
    <id>http://example.com/2019/09/17/ES6%E4%BD%BF%E7%94%A8getter%E5%92%8Csetter%E6%9D%A5%E6%8E%A7%E5%88%B6%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%AE%BF%E9%97%AE/</id>
    <published>2019-09-17T10:19:07.000Z</published>
    <updated>2020-08-19T12:30:15.992Z</updated>
    
    <content type="html"><![CDATA[<p>  我们可以从对象中获得一个值，也可以给对象的属性赋值。<br>  这些通常行为被称为getters以及setters。</p><span id="more"></span><h2 id="getter和setter函数解析"><a href="#getter和setter函数解析" class="headerlink" title="getter和setter函数解析"></a>getter和setter函数解析</h2><p>Getter函数的作用是可以让返回一个对象私有变量的值给用户，而不需要去访问私有变量。</p><p>Setter函数的作用是可以基于传进的参数来修改对象中私有变量的值。这些修改可以是计算，或者是直接替换之前的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">author</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._author = author;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// getter</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">writer</span>()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._author;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// setter</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title">writer</span>(<span class="params">updatedAuthor</span>)&#123;</span><br><span class="line">    <span class="built_in">this</span>._author = updatedAuthor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> lol = <span class="keyword">new</span> Book(<span class="string">&#x27;anonymous&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(lol.writer);  <span class="comment">// anonymous</span></span><br><span class="line">lol.writer = <span class="string">&#x27;wut&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(lol.writer);  <span class="comment">// wut</span></span><br></pre></td></tr></table></figure><p>注意我们调用getter和setter的语法，它们看起来并不像一个函数调用。</p><p>Getter和Setter非常重要，因为它们隐藏了内部的实现细节。</p><h2 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h2><p>使用class关键字来创建Thermostat类，它的构造函数应该可以接收华氏温度作为参数。 在类中创建getter和setter，将温度转换成摄氏温度。<br>温度转换的公式是C = 5/9 <em> (F - 32)以及F = C </em> 9.0 / 5 + 32，F 代表华氏温度，C 代表摄氏温度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeClass</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &quot;use strict&quot;</span>;</span><br><span class="line">  <span class="comment">/* Alter code below this line */</span></span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Thermostat</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">farenheit</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.farenheit = farenheit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">temperature</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">5</span> / <span class="number">9</span> * (<span class="built_in">this</span>.farenheit - <span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title">temperature</span>(<span class="params">celsius</span>)&#123;</span><br><span class="line">      <span class="built_in">this</span>.farenheit = celsius * <span class="number">9.0</span> / <span class="number">5</span> + <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Alter code above this line */</span></span><br><span class="line">  <span class="keyword">return</span> Thermostat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Thermostat = makeClass();</span><br><span class="line"><span class="keyword">const</span> thermos = <span class="keyword">new</span> Thermostat(<span class="number">76</span>); <span class="comment">// 使用华氏温度来初始化</span></span><br><span class="line"><span class="keyword">let</span> temp = thermos.temperature; <span class="comment">// 摄氏温度24.44度</span></span><br><span class="line">thermos.temperature = <span class="number">26</span>;</span><br><span class="line">temp = thermos.temperature; <span class="comment">// 摄氏温度26度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应当在类中使用一个温度标准，无论是华氏温度还是摄氏温度。</p><p>总之，getter 和 setter 的威力了就是无论你的 API 内部使用的是哪种温度标准，用户都能得到正确的结果。</p><p>或者说，我们从用户需求中抽象出了实现细节</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;  我们可以从对象中获得一个值，也可以给对象的属性赋值。&lt;br&gt;  这些通常行为被称为getters以及setters。&lt;/p&gt;</summary>
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>网络编程-聊天室</title>
    <link href="http://example.com/2019/06/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>http://example.com/2019/06/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E8%81%8A%E5%A4%A9%E5%AE%A4/</id>
    <published>2019-06-10T04:40:22.000Z</published>
    <updated>2020-08-19T12:30:29.833Z</updated>
    
    <content type="html"><![CDATA[<pre><code>此demo是基于TCP套接字编程，目的是实现一个聊天室效果。类似于QQ群效果，如果上线可以通知其他好友，下线也会通知其他好友。需要用到socket编程和多线程技术等。</code></pre><span id="more"></span><h2 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><ol><li>创建socket，使用socket()　</li><li>准备通信地址，sockaddr_in：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span>    sa_family;</span><br><span class="line">    <span class="keyword">char</span>               sa_data[];</span><br><span class="line">    ....</span><br><span class="line">    ....</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line">    <span class="keyword">in_addr_t</span>    s_addr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>&#123;</span></span><br><span class="line">    <span class="keyword">sa_family_t</span>    sin_family;     <span class="comment">//协议族 要和socket中的family相同</span></span><br><span class="line">    <span class="keyword">in_port_t</span>        sin_port;       <span class="comment">//网络端口</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>  <span class="title">sin_addr</span>;</span>     <span class="comment">//网络地址</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>绑定 套接字描述符 和 通信地址 使用函数 bind()；   需要注意的是为使不同格式地址能够被传入到套接字函数，地址被强制转换成通用的地址结构 sockadd表示。</li><li>监听客户端， 使用函数 listen();</li><li>等待客户端的连接，使用函数 accept(). 此函数在客户端连接上来后，将返回一个新的socket描述符，这个心得描述符用于和客户端的交互。 使用此函数需要注意的是，如果想从客户端那里得到一些信息需要重新声明一个 struct socketaddr_in 类型的参数，然后传给此函数的第二个和第三个参数即可。</li><li>把accept 返回的socket描述符当做文件描述符来操作即可</li></ol><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ol><li>创建socket，使用socket()</li><li>准备通信地址，sockaddr_in</li><li>建立连接 使用函数 connect()</li><li>把socketfd当做文件描述符来使用即可，就像服务端的第六步。</li></ol><h2 id="多线程技术"><a href="#多线程技术" class="headerlink" title="多线程技术"></a>多线程技术</h2><ol><li>首先需要两个执行程序，一个模拟客户端，一个模拟服务端</li><li>客户端首先使用socket，connect等函数连接上服务器，然后创建多线程用来接收服务器发来的消息，主线程用来发送消息到服务器。</li><li>服务器端：</li></ol><p>　　　　①：首先创建一个全局变量数组用来保存客户端连接上来的信息，因为不止一个客户端连接上。</p><p>　　　　②：创建 socket 套接字，然后监听客户端发来的消息，当有客户端连接上来的时候创建多线程为此客户端服务。</p><pre><code>              需要注意的是对全局变量——保存所有客户端套接字的数组。当客户端断开连接的时候需要清理数组中的信息。</code></pre><h2 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="comment">//准备工作</span></span><br><span class="line"><span class="keyword">int</span> sockfd;<span class="comment">//</span></span><br><span class="line"><span class="keyword">char</span>* IP = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//本机IP,回送地址</span></span><br><span class="line"><span class="keyword">short</span> PORT = <span class="number">10222</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">SA</span>;</span><span class="comment">//类型转换</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//客户端昵称</span></span><br><span class="line"><span class="comment">//启动客户端，连接服务器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;聊天室客户端开始启动\n&quot;</span>);</span><br><span class="line">    sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = inet_addr(IP);</span><br><span class="line">    <span class="keyword">if</span>(connect(sockfd,(SA*)&amp;addr,<span class="keyword">sizeof</span>(addr))==<span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;无法连接到服务器&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;客户端启动失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;客户端启动成功\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始通信</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">recv_thread</span><span class="params">(<span class="keyword">void</span>* p)</span></span>&#123;<span class="comment">//收消息</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(recv(sockfd,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>)&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="comment">//发消息之前，启动一个线程,用来接受服务器发送过来的消息</span></span><br><span class="line">    <span class="keyword">pthread_t</span> pid;</span><br><span class="line">    pthread_create(&amp;pid,<span class="number">0</span>,recv_thread,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf);<span class="comment">//接受用户输入</span></span><br><span class="line">        <span class="keyword">char</span> msg[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(msg,<span class="string">&quot;%s 说:%s&quot;</span>,name,buf);</span><br><span class="line">        send(sockfd,msg,<span class="built_in">strlen</span>(msg),<span class="number">0</span>);<span class="comment">//发给服务器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_close</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//关闭客户端的描述符</span></span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    signal(SIGINT,sig_close);<span class="comment">//关闭CTRL+C</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入您的昵称:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,name);</span><br><span class="line">    init();<span class="comment">//连接服务器</span></span><br><span class="line">    send(sockfd,name,<span class="built_in">strlen</span>(name),<span class="number">0</span>);<span class="comment">//将昵称发给服务器</span></span><br><span class="line">    start();<span class="comment">//开始通信</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="comment">//准备工作</span></span><br><span class="line"><span class="keyword">int</span> sockfd;<span class="comment">//</span></span><br><span class="line"><span class="keyword">char</span>* IP = <span class="string">&quot;127.0.0.1&quot;</span>;<span class="comment">//本机IP,回送地址</span></span><br><span class="line"><span class="keyword">short</span> PORT = <span class="number">10222</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">SA</span>;</span><span class="comment">//类型转换</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">client</span>&#123;</span><span class="comment">//</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//存储客户昵称</span></span><br><span class="line">    <span class="keyword">int</span> fds;<span class="comment">//客户端socket描述符</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">client</span> <span class="title">c</span>[100] =</span> &#123;<span class="number">0</span>&#125;;<span class="comment">//最多记录100个链接到服务器的客户端</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;<span class="comment">//记录客户端的个数，数组的索引</span></span><br><span class="line"><span class="comment">//初始化服务器的网络,创建socket</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;聊天室服务器开始启动..\n&quot;</span>);</span><br><span class="line">    sockfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sockfd == <span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;创建socket失败&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;服务器启动失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//准备网络通信地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">    addr.sin_family = AF_INET;</span><br><span class="line">    addr.sin_port = htons(PORT);</span><br><span class="line">    addr.sin_addr.s_addr = inet_addr(IP);</span><br><span class="line">    <span class="keyword">if</span>(bind(sockfd,(SA*)&amp;addr,<span class="keyword">sizeof</span>(addr))==<span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;绑定失败&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;服务器启动失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;成功绑定\n&quot;</span>);</span><br><span class="line">    <span class="comment">//设置监听</span></span><br><span class="line">    <span class="keyword">if</span>(listen(sockfd,<span class="number">10</span>)==<span class="number">-1</span>)&#123;</span><br><span class="line">        perror(<span class="string">&quot;设置监听失败&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;服务器启动失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;设置监听成功\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;初始化服务器成功\n&quot;</span>);</span><br><span class="line">    <span class="comment">//等待客户端链接，放到另一个函数中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//线程函数,用来接受客户端的消息,并把消息发给所有客户端</span></span><br><span class="line"><span class="comment">//分发消息函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendMsgToAll</span><span class="params">(<span class="keyword">char</span>* msg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;size;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sendto%d\n&quot;</span>,c[i].fds);</span><br><span class="line">        send(c[i].fds,msg,<span class="built_in">strlen</span>(msg),<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">service_thread</span><span class="params">(<span class="keyword">void</span>* p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = *(<span class="keyword">int</span>*)p;<span class="comment">//拿到标记客户端的sockfd</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pthread=%d\n&quot;</span>,fd);<span class="comment">//输出测试</span></span><br><span class="line">    <span class="comment">//记录客户端的sockfd</span></span><br><span class="line">    c[size].fds = fd;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(recv(fd,name,<span class="keyword">sizeof</span>(name),<span class="number">0</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(c[size].name,name);<span class="comment">//拿到昵称</span></span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">char</span> tishi[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">//群发通知消息</span></span><br><span class="line">    <span class="built_in">sprintf</span>(tishi,<span class="string">&quot;热烈欢迎 %s 登录聊天室..&quot;</span>,name);</span><br><span class="line">    <span class="comment">//发给所有人</span></span><br><span class="line">    sendMsgToAll(tishi);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(recv(fd,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//返回0,表示TCP另一端断开链接</span></span><br><span class="line">            <span class="comment">//有客户端退出</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fd=%dquit\n&quot;</span>,fd);<span class="comment">//测试</span></span><br><span class="line">            <span class="keyword">int</span> i;</span><br><span class="line">            <span class="keyword">char</span> name[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c[i].fds == fd)&#123;</span><br><span class="line">                    <span class="built_in">strcpy</span>(name,c[i].name);</span><br><span class="line">                    c[i].fds = c[size<span class="number">-1</span>].fds;</span><br><span class="line">                    <span class="built_in">strcpy</span>(c[i].name,c[size<span class="number">-1</span>].name);<span class="comment">//用最后一个有效的数组元素，覆盖当前没用的这个保存退出的客户端的信息的数组元素</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;quit-&gt;fd=%dquit\n&quot;</span>,fd);</span><br><span class="line">            <span class="keyword">char</span> msg[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="built_in">sprintf</span>(msg,<span class="string">&quot;欢送 %s 离开聊天室,再见!&quot;</span>,name);</span><br><span class="line">            <span class="comment">//群发退出通知</span></span><br><span class="line">            sendMsgToAll(msg);</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//客户端退出了，结束服务线程</span></span><br><span class="line">        &#125;</span><br><span class="line">        sendMsgToAll(buf);<span class="comment">//接受成功,广播聊天信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等待客户端的连接，启动服务器的服务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;服务器开始服务\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">fromaddr</span>;</span></span><br><span class="line">        <span class="keyword">socklen_t</span> len = <span class="keyword">sizeof</span>(fromaddr);</span><br><span class="line">        <span class="keyword">int</span> fd = accept(sockfd,(SA*)&amp;fromaddr,&amp;len);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;客户端链接出错\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//继续循环，处理连接</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果客户端成功连接上</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;fd=%d\n&quot;</span>,fd);<span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        <span class="keyword">pthread_t</span> pid;</span><br><span class="line">        pthread_create(&amp;pid,<span class="number">0</span>,service_thread,&amp;fd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sig_close</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//关闭服务器的socket</span></span><br><span class="line">    close(sockfd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;服务器已经关闭\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    signal(SIGINT,sig_close);<span class="comment">//退出CTRL+C</span></span><br><span class="line">    init();</span><br><span class="line">    service();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;此demo是基于TCP套接字编程，目的是实现一个聊天室效果。类似于QQ群效果，如果上线可以通知其他好友，下线也会通知其他好友。需要用到socket编程和多线程技术等。
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>linux文件系统的实现</title>
    <link href="http://example.com/2018/12/27/%E7%AE%80%E6%98%93%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2018/12/27/%E7%AE%80%E6%98%93%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2018-12-26T17:20:44.000Z</published>
    <updated>2020-08-19T12:30:37.207Z</updated>
    
    <content type="html"><![CDATA[<pre><code>Linux 操作系统的一个重要特点是它支持许多不同类型的文件系统。Linux 中最普遍使用的文件系统是 Ext2，它也是 Linux 土生土长的文件系统。但 Linux 也能够支持 FAT、VFAT、FAT32、MINIX 等不同类型的文件系统，从而可以方便地和其它操作系统交换数据。由于 Linux 支持许多不同的文件系统，并且将它们组织成了一个统一的虚拟文件系统.</code></pre><span id="more"></span><h2 id="内容要求"><a href="#内容要求" class="headerlink" title="* 内容要求"></a>* 内容要求</h2><h3 id="0x00"><a href="#0x00" class="headerlink" title="* 0x00"></a>* 0x00</h3><ul><li>在内存中开辟一个虚拟磁盘空间作为文件存储分区，在其上实现一个简单的基于多级目录的单用户单任务系统中的文件系统。在退出该文件系统的使用时，应将该虚拟文件系统以一个文件的方式保存到磁盘上，以便下次可以再将它恢复到内存的虚拟磁盘空间中。  </li></ul><h3 id="0x01"><a href="#0x01" class="headerlink" title="* 0x01"></a>* 0x01</h3><ul><li>文件存储空间的分配可采用显式链接分配或其他的办法。  </li></ul><h3 id="0x02"><a href="#0x02" class="headerlink" title="* 0x02"></a>* 0x02</h3><ul><li>空闲磁盘空间的管理可选择位示图或其他的办法。如果采用位示图来管理文件存储空间，并采用显式链接分配方式，那么可以将位示图合并到 FAT 中。  </li></ul><h3 id="0x03"><a href="#0x03" class="headerlink" title="* 0x03"></a>* 0x03</h3><ul><li>文件目录结构采用多级目录结构。为了简单起见，可以不使用索引结点，其中的每个目录项应包含文件名、物理地址、长度等信息，还可以通过目录项实现对文件的读和写的保护。  </li></ul><h3 id="0x04"><a href="#0x04" class="headerlink" title="* 0x04"></a>* 0x04</h3><ul><li>要求提供以下操作命令：  </li></ul><ul><li>my_format：对文件存储器进行格式化，即按照文件系统的结构对虚拟磁盘空间进行布局，并在其上创建根目录以及用于管理文件存储空间等的数据结构。</li><li>my_mkdir：用于创建子目录。</li><li>my_rmdir：用于删除子目录。</li><li>my_ls：用于显示目录中的内容。</li><li>my_cd：用于更改当前目录。</li><li>my_create：用于创建文件。</li><li>my_open：用于打开文件。</li><li>my_close：用于关闭文件。</li><li>my_write：用于写文件。</li><li>my_read：用于读文件。</li><li>my_rm：用于删除文件。</li><li>my_exitsys：用于退出文件系统  </li></ul><h2 id="实例主要命令及函数设计"><a href="#实例主要命令及函数设计" class="headerlink" title="实例主要命令及函数设计"></a>实例主要命令及函数设计</h2><h3 id="1．系统主函数main"><a href="#1．系统主函数main" class="headerlink" title="1．系统主函数main()"></a>1．系统主函数main()</h3><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：int main()<br>（4）功能：系统主函数<br>（5）输入：无<br>（6）输出：无<br>（7）函数需完成的工作：<br>① 对前面定义的全局变量进行初始化；<br>② 调用startsys()进入文件系统；<br>③ 列出文件系统提供的各项功能及命令调用格式；<br>④ 显示命令行提示符，等待用户输入命令；<br>⑤ 将用户输入的命令保存到一个buf 中；<br>⑥ 对buf 中的内容进行命令解析，并调用相应的函数执行用户键入的命令；<br>⑦ 如果命令不是“my_exitsys”，则命令执行完毕后转④。    </p><h3 id="2-进入文件系统函数startsys"><a href="#2-进入文件系统函数startsys" class="headerlink" title="2. 进入文件系统函数startsys()"></a>2. 进入文件系统函数startsys()</h3><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：void startsys()<br>（4）功能：由main()函数调用，进入并初始化我们所建立的文件系统，以供用户使用。<br>（5）输入：无<br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 申请虚拟磁盘空间；<br>② 使用c语言的库函数fopen()打开myfsys文件：若文件存在，则转③；若文件不存在，则创建之，转⑤<br>③ 使用c语言的库函数fread()读入myfsys文件内容到用户空间中的一个缓冲区中，并判断其开始的8个字节内容是否为“10101010”（文件系统魔数），如果是，则转④；否则转⑤；<br>④ 将上述缓冲区中的内容复制到内存中的虚拟磁盘空间中；转⑦<br>⑤ 在屏幕上显示“myfsys文件系统不存在，现在开始创建文件系统”信息，并调用my_format()对①中申请到的虚拟磁盘空间进行格式化操作。转⑥；<br>⑥ 将虚拟磁盘中的内容保存到myfsys文件中；转⑦<br>⑦ 使用c语言的库函数fclose()关闭myfsys文件；<br>⑧ 初始化用户打开文件表，将表项0分配给根目录文件使用，并填写根目录文件的相关信息，由于根目录没有上级目录，所以表项中的dirno和diroff分别置为5（根目录所在起始块号）和0；并将ptrcurdir指针指向该用户打开文件表项。<br>⑨ 将当前目录设置为根目录。  </p><h3 id="3．磁盘格式化函数my-format"><a href="#3．磁盘格式化函数my-format" class="headerlink" title="3．磁盘格式化函数my_format()"></a>3．磁盘格式化函数my_format()</h3><p>（1）对应命令：format<br>（2）命令调用格式：format<br>（3）函数设计格式：void my_format()<br>（4）功能：对虚拟磁盘进行格式化，布局虚拟磁盘，建立根目录文件（或根目录区）。<br>（5）输入：无<br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 将虚拟磁盘第一个块作为引导块，开始的8个字节是文件系统的魔数，记为“10101010”；在之后写入文件系统的描述信息，如FAT表大小及位置、根目录大小及位置、盘块大小、盘块数量、数据区开始位置等信息；<br>② 在引导块后建立两张完全一样的FAT表，用于记录文件所占据的磁盘块及管理虚拟磁盘块的分配，每个FAT占据两个磁盘块；对于每个FAT中，前面5个块设置为已分配，后面995个块设置为空闲；<br>③ 在第二张FAT后创建根目录文件root，将数据区的第1块（即虚拟磁盘的第6块）分配给根目录文件，在该磁盘上创建两个特殊的目录项：“.”和“..”，其内容除了文件名不同之外，其他字段完全相同。  </p><h3 id="4．更改当前目录函数my-cd"><a href="#4．更改当前目录函数my-cd" class="headerlink" title="4．更改当前目录函数my_cd()"></a>4．更改当前目录函数my_cd()</h3><p>（1）对应命令：cd<br>（2）命令调用格式：cd dirname<br>（3）函数设计格式：void my_cd(char *dirname)<br>（4）功能：改变当前目录到指定的名为dirname的目录。<br>（5）输入：dirname：新的当前目录的目录名；<br>（6）输出：无<br>（7）函数需完成的工作：<br>① 调用my_open()打开指定目录名的父目录文件，并调用do_read()读入该父目录文件内容到内存中；<br>② 在父目录文件中检查新的当前目录名是否存在，如果存在则转③，否则返回，并显示出错信息；<br>③ 调用my_close()关闭①中打开的父目录文件；<br>④ 调用my_close()关闭原当前目录文件；<br>⑤ 如果新的当前目录文件没有打开，则打开该目录文件；并将ptrcurdir指向该打开文件表项；<br>⑥ 设置当前目录为该目录。  </p><h3 id="5．创建子目录函数my-mkdir"><a href="#5．创建子目录函数my-mkdir" class="headerlink" title="5．创建子目录函数my_mkdir()"></a>5．创建子目录函数my_mkdir()</h3><p>（1）对应命令：mkdir<br>（2）命令调用格式：mkdir dirname<br>（3）函数设计格式：void my_mkdir(char *dirname)<br>（4）功能：在当前目录下创建名为dirname的子目录。<br>（5）输入：dirname：新建目录的目录名。<br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 调用do_read()读入当前目录文件内容到内存，检查当前目录下新建目录文件是否重名，若重名则返回，并显示错误信息；<br>② 为新建子目录文件分配一个空闲打开文件表项，如果没有空闲表项则返回-1，并显示错误信息；<br>③ 检查FAT是否有空闲的盘块，如有则为新建目录文件分配一个盘块，否则释放①中分配的打开文件表项，返回，并显示错误信息；<br>④ 在当前目录中为新建目录文件寻找一个空闲的目录项或为其追加一个新的目录项;需修改当前目录文件的长度信息，并将当前目录文件的用户打开文件表项中的fcbstate置为1；<br>⑤ 准备好新建目录文件的FCB的内容，文件的属性为目录文件，以覆盖写方式调用do_write()将其填写到对应的空目录项中；<br>⑥ 在新建目录文件所分配到的磁盘块中建立两个特殊的目录项“.”和“..”目录项，方法是：首先在用户空间中准备好内容，然后以截断写或者覆盖写方式调用do_write()将其写到③中分配到的磁盘块中；<br>⑦ 返回。   </p><h3 id="6．删除子目录函数rmdir"><a href="#6．删除子目录函数rmdir" class="headerlink" title="6．删除子目录函数rmdir()"></a>6．删除子目录函数rmdir()</h3><p>（1）对应命令：rmdir<br>（2）命令调用格式：rmdir dirname<br>（1）函数设计格式：void my_rmdir(char *dirname)<br>（2）功能：在当前目录下删除名为dirname的子目录。<br>（3）输入：dirname：欲删除目录的目录名。<br>（4）输出：无。<br>（5）函数需完成的工作：<br>① 调用do_read()读入当前目录文件内容到内存，检查当前目录下欲删除目录文件是否存在，若不存在则返回，并显示错误信息；<br>② 检查欲删除目录文件是否为空（除了“.”和“..”外没有其他子目录和文件），可根据其目录项中记录的文件长度来判断，若不为空则返回，并显示错误信息；<br>③ 检查该目录文件是否已经打开，若已打开则调用my_close()关闭掉；<br>④ 回收该目录文件所占据的磁盘块，修改FAT；<br>⑤ 从当前目录文件中清空该目录文件的目录项，且free字段置为0：以覆盖写方式调用do_write()来实现；<br>⑥ 修改当前目录文件的用户打开表项中的长度信息，并将表项中的fcbstate置为1；<br>⑦ 返回。  </p><h3 id="7．显示目录函数my-ls"><a href="#7．显示目录函数my-ls" class="headerlink" title="7．显示目录函数my_ls()"></a>7．显示目录函数my_ls()</h3><p>（1）对应命令：ls<br>（2）命令调用格式：ls<br>（3）函数设计格式：void my_ls(void)<br>（4）功能：显示当前目录的内容（子目录和文件信息）。<br>（5）输入：无<br>（6）输出：无<br>（7）函数需完成的工作：<br>① 调用do_read()读出当前目录文件内容到内存；<br>② 将读出的目录文件的信息按照一定的格式显示到屏幕上；<br>③ 返回。  </p><h3 id="8．创建文件函数my-create"><a href="#8．创建文件函数my-create" class="headerlink" title="8．创建文件函数my_create()"></a>8．创建文件函数my_create()</h3><p>（1）对应命令：create<br>（2）命令调用格式：create filename<br>（3）函数设计格式：int my_create (char *filename)<br>（4）功能：创建名为filename的新文件。<br>（5）输入：filename：新建文件的文件名，可能包含路径。<br>（6）输出：若创建成功，返回该文件的文件描述符（文件打开表中的数组下标）；否则返回-1。<br>（7）函数需完成的工作：<br>① 为新文件分配一个空闲打开文件表项，如果没有空闲表项则返回-1，并显示错误信息；<br>② 若新文件的父目录文件还没有打开，则调用my_open()打开；若打开失败，则释放①中为新建文件分配的空闲文件打开表项，返回-1，并显示错误信息；<br>③ 调用do_read()读出该父目录文件内容到内存，检查该目录下新文件是否重名，若重名则释放①中分配的打开文件表项，并调用my_close()关闭②中打开的目录文件；然后返回-1，并显示错误信息；<br>④ 检查FAT是否有空闲的盘块，如有则为新文件分配一个盘块，否则释放①中分配的打开文件表项，并调用my_close()关闭②中打开的目录文件；返回-1，并显示错误信息；<br>⑤ 在父目录中为新文件寻找一个空闲的目录项或为其追加一个新的目录项;需修改该目录文件的长度信息，并将该目录文件的用户打开文件表项中的fcbstate置为1；<br>⑥ 准备好新文件的FCB的内容，文件的属性为数据文件，长度为0，以覆盖写方式调用do_write()将其填写到⑤中分配到的空目录项中；<br>⑦ 为新文件填写①中分配到的空闲打开文件表项，fcbstate字段值为0，读写指针值为0；<br>⑧ 调用my_close()关闭②中打开的父目录文件；<br>⑨ 将新文件的打开文件表项序号作为其文件描述符返回。  </p><h3 id="9．删除文件函数my-rm"><a href="#9．删除文件函数my-rm" class="headerlink" title="9．删除文件函数my_rm()"></a>9．删除文件函数my_rm()</h3><p>（1）对应命令：rm<br>（2）命令调用格式：rm filename<br>（3）函数设计格式：void my_rm(char *filename)<br>（4）功能：删除名为filename的文件。<br>（5）输入：filename：欲删除文件的文件名，可能还包含路径。<br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 若欲删除文件的父目录文件还没有打开，则调用my_open()打开；若打开失败，则返回，并显示错误信息；<br>② 调用do_read()读出该父目录文件内容到内存，检查该目录下欲删除文件是否存在，若不存在则返回，并显示错误信息；<br>③ 检查该文件是否已经打开，若已打开则关闭掉；<br>④ 回收该文件所占据的磁盘块，修改FAT；<br>⑤ 从文件的父目录文件中清空该文件的目录项，且free字段置为0：以覆盖写方式调用do_write()来实现；<br>⑥ 修改该父目录文件的用户打开文件表项中的长度信息，并将该表项中的fcbstate置为1；<br>⑦ 返回。  </p><h3 id="10．打开文件函数my-open"><a href="#10．打开文件函数my-open" class="headerlink" title="10．打开文件函数my_open()"></a>10．打开文件函数my_open()</h3><p>（1）对应命令：open<br>（2）命令调用格式：open filename<br>（3）函数设计格式：int my_open(char *filename)<br>（4）功能：打开当前目录下名为filename的文件。<br>（5）输入：filename：欲打开文件的文件名<br>（6）输出：若打开成功，返回该文件的描述符（在用户打开文件表中表项序号）；否则返回-1。<br>（7）函数需完成的工作：<br>① 检查该文件是否已经打开，若已打开则返回-1，并显示错误信息；<br>② 调用do_read()读出父目录文件的内容到内存，检查该目录下欲打开文件是否存在，若不存在则返回-1，并显示错误信息；<br>③ 检查用户打开文件表中是否有空表项，若有则为欲打开文件分配一个空表项，若没有则返回-1，并显示错误信息；<br>④ 为该文件填写空白用户打开文件表表项内容，读写指针置为0；<br>⑤ 将该文件所分配到的空白用户打开文件表表项序号（数组下标）作为文件描述符fd返回。  </p><h3 id="11．关闭文件函数my-close"><a href="#11．关闭文件函数my-close" class="headerlink" title="11．关闭文件函数my_close()"></a>11．关闭文件函数my_close()</h3><p>（1）对应命令：close<br>（2）命令调用格式：close fd<br>（3）函数设计格式：void my_close(int fd)<br>（4）功能：关闭前面由my_open()打开的文件描述符为fd的文件。<br>（5）输入：fd：文件描述符。<br>（6）输出：无。<br>（7）函数需完成的工作：<br>① 检查fd的有效性（fd不能超出用户打开文件表所在数组的最大下标），如果无效则返回-1；<br>② 检查用户打开文件表表项中的fcbstate字段的值，如果为1则需要将该文件的FCB的内容保存到虚拟磁盘上该文件的目录项中，方法是：打开该文件的父目录文件，以覆盖写方式调用do_write()将欲关闭文件的FCB写入父目录文件的相应盘块中；<br>③ 回收该文件占据的用户打开文件表表项（进行清空操作），并将topenfile字段置为0；<br>④ 返回。  </p><h3 id="12．写文件函数my-write"><a href="#12．写文件函数my-write" class="headerlink" title="12．写文件函数my_write()"></a>12．写文件函数my_write()</h3><p>（1）对应命令：write<br>（2）命令调用格式：write fd<br>（3）函数设计格式：int my_write(int fd)<br>（4）功能：将用户通过键盘输入的内容写到fd所指定的文件中。磁盘文件的读写操作都必须以完整的数据块为单位进行，在写操作时，先将数据写在缓冲区中，缓冲区的大小与磁盘块的大小相同，然后再将缓冲区中的数据一次性写到磁盘块中；读出时先将一个磁盘块中的内容读到缓冲区中，然后再传送到用户区。本实例为了简便起见，没有设置缓冲区管理，只是在读写文件时由用户使用malloc()申请一块空间作为缓冲区，读写操作结束后使用free()释放掉。<br>写操作常有三种方式：截断写、覆盖写和追加写。截断写是放弃原来文件的内容，重新写文件；覆盖写是修改文件在当前读写指针所指的位置开始的部分内容；追加写是在原文件的最后添加新的内容。在本实例中，输入写文件命令后，系统会出现提示让用户选择其中的一种写方式，并将随后键盘输入的内容按照所选的方式写到文件中，键盘输入内容通过CTR+Z键（或其他设定的键）结束。<br>（5）输入：fd:open()函数的返回值，文件的描述符；<br>（6）输出：实际写入的字节数。<br>（7）函数需完成的工作：<br>① 检查fd的有效性（fd不能超出用户打开文件表所在数组的最大下标），如果无效则返回-1，并显示出错信息；<br>② 提示并等待用户输入写方式：（1：截断写；2：覆盖写；3：追加写）<br>③ 如果用户要求的写方式是截断写，则释放文件除第一块外的其他磁盘空间内容（查找并修改FAT表），将内存用户打开文件表项中文件长度修改为0，将读写指针置为0并转④；如果用户要求的写方式是追加写，则修改文件的当前读写指针位置到文件的末尾，并转④；如果写方式是覆盖写，则直接转④；<br>④ 提示用户：整个输入内容通过CTR+Z键（或其他设定的键）结束；用户可分多次输入写入内容，每次用回车结束；<br>⑤ 等待用户从键盘输入文件内容，并将用户的本次输入内容保存到一临时变量text[]中，要求每次输入以回车结束，全部结束用CTR+Z键（或其他设定的键）；<br>⑥ 调用do_write()函数将通过键盘键入的内容写到文件中。<br>⑦ 如果do_write()函数的返回值为非负值，则将实际写入字节数增加do_write()函数返回值，否则显示出错信息，并转⑨；<br>⑧ 如果text[]中最后一个字符不是结束字符CTR+Z，则转⑦继续进行写操作；否则转⑨；<br>⑨ 如果当前读写指针位置大于用户打开文件表项中的文件长度，则修改打开文件表项中的文件长度信息，并将fcbstate置1；<br>⑩ 返回实际写入的字节数。  </p><h3 id="13．实际写文件函数do-write"><a href="#13．实际写文件函数do-write" class="headerlink" title="13．实际写文件函数do_write()"></a>13．实际写文件函数do_write()</h3><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：int my_write(int fd，char *text，int len，char wstyle)<br>（4）功能：被写文件函数my_write()调用，用来将键盘输入的内容写到相应的文件中去。<br>（5）输入：fd：open()函数的返回值，文件的描述符；<br>text：指向要写入的内容的指针；<br>len：本次要求写入字节数<br>wstyle：写方式<br>（6）输出：实际写入的字节数。<br>（7）函数需完成的工作：<br>① 用malloc()申请1024B的内存空间作为读写磁盘的缓冲区buf，申请失败则返回-1，并显示出错信息；<br>② 将读写指针转化为逻辑块块号和块内偏移off，并利用打开文件表表项中的首块号及FAT表的相关内容将逻辑块块号转换成对应的磁盘块块号blkno；如果找不到对应的磁盘块，则需要检索FAT为该逻辑块分配一新的磁盘块，并将对应的磁盘块块号blkno登记到FAT中，若分配失败，则返回-1，并显示出错信息；<br>③ 如果是覆盖写，或者如果当前读写指针所对应的块内偏移off不等于0，则将块号为blkno的虚拟磁盘块全部1024B的内容读到缓冲区buf中；否则便用ASCII码0清空buf；<br>④ 将text中未写入的内容暂存到缓冲区buff的第off字节开始的位置，直到缓冲区满，或者接收到结束字符CTR+Z为止；将本次写入字节数记录到tmplen中；<br>⑤ 将buf中1024B的内容写入到块号为blkno的虚拟磁盘块中；<br>⑥将当前读写指针修改为原来的值加上tmplen；并将本次实际写入的字节数增加tmplen；<br>⑦ 如果tmplen小于len，则转②继续写入；否则转⑧；<br>⑧ 返回本次实际写入的字节数。  </p><h3 id="14．读文件函数my-read"><a href="#14．读文件函数my-read" class="headerlink" title="14．读文件函数my_read()"></a>14．读文件函数my_read()</h3><p>（1）对应命令：read<br>（2）命令调用格式：read fd len<br>（3）函数设计格式：int myread (int fd, int len)<br>（4）功能：读出指定文件中从读写指针开始的长度为len的内容到用户空间中。<br>（5）输入：<br>fd： open()函数的返回值，文件的描述符；<br>len: 要从文件中读出的字节数。<br>（6）输出：实际读出的字节数。<br>（7）函数需完成的工作：<br>① 定义一个字符型数组text[len]，用来接收用户从文件中读出的文件内容；<br>② 检查fd的有效性（fd不能超出用户打开文件表所在数组的最大下标），如果无效则返回-1，并显示出错信息；<br>③ 调用do_read()将指定文件中的len字节内容读出到text[]中；<br>④ 如果do_read()的返回值为负，则显示出错信息；否则将text[]中的内容显示到屏幕上；<br>⑤ 返回。    </p><h3 id="15．实际读文件函数do-read"><a href="#15．实际读文件函数do-read" class="headerlink" title="15．实际读文件函数do_read()"></a>15．实际读文件函数do_read()</h3><p>（1）对应命令：无<br>（2）命令调用格式：无<br>（3）函数设计格式：int do_read (int fd, int len,char *text)<br>（4）功能：被my_read()调用，读出指定文件中从读写指针开始的长度为len的内容到用户空间的text中。<br>（5）输入：<br>fd： open()函数的返回值，文件的描述符；<br>len: 要求从文件中读出的字节数。<br>text：指向存放读出数据的用户区地址<br>（6）输出：实际读出的字节数。<br>（7）函数需完成的工作：<br>① 使用malloc()申请1024B空间作为缓冲区buf，申请失败则返回-1，并显示出错信息；<br>② 将读写指针转化为逻辑块块号及块内偏移量off，利用打开文件表表项中的首块号查找FAT表，找到该逻辑块所在的磁盘块块号；将该磁盘块块号转化为虚拟磁盘上的内存位置；<br>③ 将该内存位置开始的1024B（一个磁盘块）内容读入buf中；<br>④ 比较buf中从偏移量off开始的剩余字节数是否大于等于应读写的字节数len，如果是，则将从off开始的buf中的len长度的内容读入到text[]中；否则，将从off开始的buf中的剩余内容读入到text[]中；<br>⑤ 将读写指针增加④中已读字节数，将应读写的字节数len减去④中已读字节数，若len大于0，则转②；否则转⑥；<br>⑥ 使用free()释放①中申请的buf。<br>⑦ 返回实际读出的字节数。    </p><h3 id="16-退出文件系统函数my-exitsys"><a href="#16-退出文件系统函数my-exitsys" class="headerlink" title="16. 退出文件系统函数my_exitsys()"></a>16. 退出文件系统函数my_exitsys()</h3><p>（1）对应命令：exit<br>（2）命令调用格式：exit<br>（1）函数设计格式：void my_exitsys()<br>（2）功能：退出文件系统。<br>（3）输入：无<br>（4）输出：无。<br>（5）函数需完成的工作：<br>① 使用C库函数fopen()打开磁盘上的myfsys文件；<br>② 将虚拟磁盘空间中的所有内容保存到磁盘上的myfsys文件中；<br>③ 使用c语言的库函数fclose()关闭myfsys文件；<br>④ 撤销用户打开文件表，释放其内存空间<br>④ 释放虚拟磁盘空间。  </p>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;Linux 操作系统的一个重要特点是它支持许多不同类型的文件系统。Linux 中最普遍使用的文件系统是 Ext2，它也是 Linux 土生土长的文件系统。但 Linux 也能够支持 FAT、VFAT、FAT32、MINIX 等不同类型的文件系统，从而可以方便地和其它操作系统交换数据。由于 Linux 支持许多不同的文件系统，并且将它们组织成了一个统一的虚拟文件系统.
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    
    <category term="linux c" scheme="http://example.com/tags/linux-c/"/>
    
  </entry>
  
  <entry>
    <title>amatory poems</title>
    <link href="http://example.com/2018/12/26/amatory-poems/"/>
    <id>http://example.com/2018/12/26/amatory-poems/</id>
    <published>2018-12-26T15:57:55.000Z</published>
    <updated>2018-12-26T16:16:49.351Z</updated>
    
    <content type="html"><![CDATA[<p>工程师不仅会写代码，还会写情诗哦，但这情诗不是我写的，不要来笑我</p><span id="more"></span><h2 id="阳光下的热爱"><a href="#阳光下的热爱" class="headerlink" title="阳光下的热爱"></a>阳光下的热爱</h2><pre><code>若代码丢了这世界一切都完了他们可以拿走一切摘下星星卷起天空放上货车也不能熄灭我的阳光因为我爱在底下哼着歌，敲代码</code></pre><h2 id="他是个单纯的小孩"><a href="#他是个单纯的小孩" class="headerlink" title="他是个单纯的小孩"></a>他是个单纯的小孩</h2><pre><code>只是想沉浸在代码的海洋毕竟电脑是一个单纯的小孩只要顺着他的小脾气就好比起带着面具的大人要好很多</code></pre><h2 id="守望"><a href="#守望" class="headerlink" title="守望"></a>守望</h2><pre><code>世界上最遥远的距离不是生与死的距离是你在if我在else虽然时常一起出现但永远不会结伴而行感谢try-catch让我有机会成为你的finally守在这必经的渡口</code></pre><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><pre><code>像一颗茂盛的树叶片交错，不遮挡彼此的阳光枝干延伸，生长出无数的可能这是我钟情的代码也是向往的另一半</code></pre><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><pre><code>0和1的世界里我拥抱柔软的你破晓时分才发现爱你不过是虚拟我可以抽象出整个世界可我抽象不出一个你你就是那么具体</code></pre><h2 id="我们的岁月"><a href="#我们的岁月" class="headerlink" title="我们的岁月"></a>我们的岁月</h2><pre><code>彼此的架构，交互的雪驱动万千的对象，多态之队列送来新的map，带来新的set画着从未有的symbol，唱歌永恒的const此时的她就像一个generator映射(reflect)着天空，解构着大地定义着新的模板，串起没一个iterator走过似箭(=&gt;)的寒风静默(static)间，同步异步的雪她坚守着曾经的承诺(promise)紧握万千扩展完成这如诗如画的洁白而不变的是你我奋战的岁月</code></pre><h2 id="暗恋"><a href="#暗恋" class="headerlink" title="暗恋"></a>暗恋</h2><pre><code>阳光明媚的早晨与你邂逅我的心就像那不收敛的Loss满怀期待又小鹿乱撞</code></pre><p>愿所有善良的程序猿都能找到温暖的另一半<br>愿所有为梦想而奋斗的人都能平安顺遂</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;工程师不仅会写代码，还会写情诗哦，但这情诗不是我写的，不要来笑我&lt;/p&gt;</summary>
    
    
    
    
    <category term="life" scheme="http://example.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>C语言多进程</title>
    <link href="http://example.com/2018/12/24/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2018/12/24/C%E8%AF%AD%E8%A8%80%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id>
    <published>2018-12-24T07:21:58.000Z</published>
    <updated>2018-12-26T16:28:12.929Z</updated>
    
    <content type="html"><![CDATA[<p>核的个数与可同时运行的进程数相同。相反，若进程数超过核数，进程将分时使用CPU资源。但因为CPU运行速度极快，我们会感到所有进程同时运行。当然多核越多，这种感觉也明显。</p><span id="more"></span><h2 id="fork函数创建多进程"><a href="#fork函数创建多进程" class="headerlink" title="fork函数创建多进程"></a>fork函数创建多进程</h2><h1 id="include"><a href="#include" class="headerlink" title="include "></a>include <unistd.h></h1><p>pid_t fork(void);<br>fork函数将创建调用的进程副本。两个进程都将执行fork调用后的语句，子进程将复制父进程相同的内存空间，之后的程序流要根据fork函数的返回值加以区分。</p><p>父进程：fork函数返回子进程ID<br>子进程：fork函数返回0</p><p>eg.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gval = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid;</span><br><span class="line"><span class="keyword">int</span> lval = <span class="number">20</span>;</span><br><span class="line">gval++, lval += <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;<span class="comment">//child pro</span></span><br><span class="line">gval += <span class="number">2</span>, lval += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">//parent pro</span></span><br><span class="line">gval -= <span class="number">2</span>, lval -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Child Proc: [%d, %d] \n&quot;</span>, gval, lval);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Parent Proc: [%d, %d] \n&quot;</span>, gval, lval);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：</p><h2 id="进程与僵尸进程"><a href="#进程与僵尸进程" class="headerlink" title="进程与僵尸进程"></a>进程与僵尸进程</h2><p>僵尸进程的产生<br>文件操作中，关闭文件和打开文件同等重要。同样进程的创建和进程的销毁同等重要。如果未认真对待进程销毁，它们将变成僵尸进程困扰各位。</p><p>进程完成工作后（执行完main函数中的程序后）应当销毁，但有时这些进程将变成僵尸进程，占用系统中的重要资源。</p><h2 id="子进程的终止方式："><a href="#子进程的终止方式：" class="headerlink" title="子进程的终止方式："></a>子进程的终止方式：</h2><p>传递参数并调用exit函数<br>main函数中执行return语句并返回值<br>向exit函数传递的参数值和main函数的return语句返回的值都会传递给操作系统。而操作系统并不会销毁子进程，直到把这些值传递给产生该子进程的父进程。</p><p>eg.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; Child Pro</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hi, I am a child process \n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Child Process ID: %d \n&quot;</span>, pid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;End child process \n&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;End parent process \n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>销毁僵尸进程<br>为了销毁子进程，父进程应主动请求获取子进程的返回值。</p><h2 id="使用wait函数"><a href="#使用wait函数" class="headerlink" title="使用wait函数"></a>使用wait函数</h2><h1 id="include-1"><a href="#include-1" class="headerlink" title="include "></a>include <sys/wait.h></h1><p>pid wait(int * statloc);<br>//成功时返回终止的子进程的ID，失败时返回-1<br>调用此函数时如果已有子进程终止，那么子进程终止时传递的返回值（exit函数的参数值、main函数的return返回值）将保存到该函数的参数所指内存空间。</p><p>WIFEXITED子进程正常终止时返回”真“ true<br>WEXITSTATUS返回子进程的返回值<br>eg.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Child PID:%d \n&quot;</span>, pid);</span><br><span class="line">pid = fork();</span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">7</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">wait(&amp;status);</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Child send one: %d \n&quot;</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br><span class="line">wait(&amp;status)</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Child send tow: %d \n&quot;</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br><span class="line">sleep(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果：</p><p>调用wait函数时，如果没有已终止的子进程，那么程序将阻塞（Blocking）直到有子进程终止。</p><h2 id="使用waitpid函数"><a href="#使用waitpid函数" class="headerlink" title="使用waitpid函数"></a>使用waitpid函数</h2><p>wait函数会引起程序阻塞，而waitpid即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出。</p><h1 id="include-2"><a href="#include-2" class="headerlink" title="include "></a>include <sys/wait.h></h1><p>pid_t waitpid(pid_t pid, int * statloc, int options);</p><p>//成功时返回终止的子进程ID(或0)，失败时返回-1</p><p>//1. pid 等待终止的目标子进程的ID， 若传递-1，则与wait函数相同，可以等待任意子进程终止<br>//2. …<br>//3. 传递头文件sys/wait.h中声明的常量WNOHANG，即使没有终止的子进程也不会进入阻塞状态，而是返回0并退出<br>调用waitpid时程序不会阻塞。</p><p>eg.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">24</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!waitpid(<span class="number">-1</span>, &amp;status, WNOHANG)) &#123;</span><br><span class="line">sleep(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sleep 3sec \n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (WIFEXITED(status)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Child send %d \n&quot;</span>, WEXITSTATUS(status));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果：</p><h2 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h2><p>signal函数<br>信号注册函数</p><h1 id="include-3"><a href="#include-3" class="headerlink" title="include "></a>include <signal.h></h1><p>void (<em>signal(int signo, void (</em>func)(int)))(int);</p><p>//函数名: signal<br>//参数：int signo, void (*func)(int)<br>//返回类型：参数为int类型，返回void型函数指针<br>发生第一个参数代表的情况时，调用第二个参数所指向的函数。</p><p>signal函数中注册的部分特殊情况和对应的常数。</p><p>SIGALRM: 已通过调用alarm函数注册的时间<br>SIGINT: 输入CTRL+C<br>SIGCHLD: 子进程终止<br>注册好信号后，发生注册信号时（注册的情况发生时），操作系统将调用该信号对应的函数。</p><h1 id="include-4"><a href="#include-4" class="headerlink" title="include "></a>include <unistd.h></h1><p>unsigned int alarm(unsigned int seconds);<br>如果调用该函数的同时向它传递一个正整型参数，相应时间后（以秒为单位）将产生SIGALRM信号。若向该函数传递0，则之前对SIGALRM信号的预约将取消。</p><p>eg.<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">timeout</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sig == SIGALRM) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;Time out!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">alarm(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keycontrol</span><span class="params">(<span class="keyword">int</span> sig)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (sig == SIGINT) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;CTRL+C&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">signal(SIGALRM, timeout);</span><br><span class="line">signal(SIGINT, keycontrol);</span><br><span class="line">alarm(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;waiting ...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果：</p><p>发生信号时将唤醒由于调用sleep函数而进入阻塞状态的进程</p><p>sigaction函数进行信号处理</p><h1 id="include-5"><a href="#include-5" class="headerlink" title="include "></a>include <signal.h></h1><p>int sigaction (int signo, const struct sigaction <em>act, struct sigaction </em>oldact);</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;核的个数与可同时运行的进程数相同。相反，若进程数超过核数，进程将分时使用CPU资源。但因为CPU运行速度极快，我们会感到所有进程同时运行。当然多核越多，这种感觉也明显。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux c" scheme="http://example.com/tags/linux-c/"/>
    
  </entry>
  
  <entry>
    <title>用python创建chptcha测试图像</title>
    <link href="http://example.com/2018/12/23/%E7%94%A8python%E5%88%9B%E5%BB%BAchptcha%E6%B5%8B%E8%AF%95%E5%9B%BE%E5%83%8F/"/>
    <id>http://example.com/2018/12/23/%E7%94%A8python%E5%88%9B%E5%BB%BAchptcha%E6%B5%8B%E8%AF%95%E5%9B%BE%E5%83%8F/</id>
    <published>2018-12-23T08:46:10.000Z</published>
    <updated>2018-12-23T15:20:19.725Z</updated>
    
    <content type="html"><![CDATA[<p>captcha 是用 python 写的生成验证码的库，它支持图片验证码和语音验证码，我们使用的是它生成图片验证码的功能。验证码由字母和数字组成，再加上一些噪点，但为了防止被识别，简单的图形验证码现在也变得复杂，有的加了干扰线，有的加噪点，有的加上背景，字体扭曲、粘连、镂空、混用等等，甚至有时候人眼都难以识别，只能默默点击“看不清，再来一张”</p><span id="more"></span><h2 id="pil介绍"><a href="#pil介绍" class="headerlink" title="pil介绍"></a>pil介绍</h2><p>PIL (Python Image Library) 是 Python 平台处理图片的事实标准，兼具强大的功能和简洁的 API。另外虽然介绍的是 PIL，但实际上安装的却是Pillow。PIL 的更新速度很慢，而且存在一些难以配置的问题，不推荐使用；而 Pillow 库则是 PIL 的一个分支，维护和开发活跃，Pillow 兼容 PIL的绝大多数语法，推荐使用。 安装:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install pillow</span><br></pre></td></tr></table></figure><p>安装好之后，打开 Python 解释器，输入 from PIL import Image 来测试是否安装成功</p><h3 id="pil基本概念"><a href="#pil基本概念" class="headerlink" title="pil基本概念"></a>pil基本概念</h3><p>PIL中所涉及的基本概念有如下几个：通道(bands)、尺寸(size)、坐标系统(coordinate system)。<br>每张图片都是由一个或者多个数据通道构成。PIL允许在单张图片中合成相同维数和深度的多个通道。以RGB图像为例，每张图片都是由三个数据通道构成，分别为R、G和B通道。而对于灰度图像，则只有一个通道。对于一张图片的通道数量和名称，可以通过方法getbands()来获取。方法getbands()是Image模块的方法，它会返回一个字符串元组（tuple）。该元组将包括每一个通道的名称。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;code.jpg&quot;</span>)</span><br><span class="line"> </span><br><span class="line">print(im.getbands())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># (&#x27;R&#x27;, &#x27;G&#x27;, &#x27;B&#x27;)</span></span><br></pre></td></tr></table></figure><p>通过size属性可以获取图片的尺寸。这是一个二元组，包含水平和垂直方向上的像素的个数。<br>属性size的使用如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"> </span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&quot;code.jpg&quot;</span>)</span><br><span class="line"> </span><br><span class="line">print(im.size)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 输出:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># (240, 60)</span></span><br></pre></td></tr></table></figure><h3 id="pil操作图像"><a href="#pil操作图像" class="headerlink" title="pil操作图像"></a>pil操作图像</h3><p>PIL 的主要功能定义在 Image 类当中，而 Image 类定义在同名的 Image 模块当中。使用 PIL 的功能，一般都是从新建一个Image 类的实例开始。新建 Image 类的实例有多种方法。<br>你可以用 Image 模块的 open()函数打开已有的图片档案，也可以处理其它的实例，或者从零开始构建一个实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成图片 Image.new(mode, size, color) ⇒ image</span></span><br><span class="line"><span class="comment"># 其中mode表示模式，size表示大小，color表示颜色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im= Image.new(<span class="string">&quot;RGB&quot;</span>, (<span class="number">128</span>, <span class="number">128</span>), <span class="string">&quot;#FF0000&quot;</span>)</span><br><span class="line">im.save(<span class="string">&#x27;red.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;red.jpg&#x27;</span>)</span><br><span class="line">im.show()</span><br><span class="line">im_l = im.convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># R=G=B</span></span><br><span class="line">im_l.show()</span><br></pre></td></tr></table></figure><h2 id="实现思路和代码"><a href="#实现思路和代码" class="headerlink" title="实现思路和代码"></a>实现思路和代码</h2><ol><li>设置图像大小，文本，字体大小，背景颜色和CAPTCHA长度</li><li>从英文字母表中选取随机的字符</li><li>用指定的字体和颜色在图像中把这些字符绘制出来</li><li>添加一些直线和弧线形式的噪声</li><li>把CAPTCHA和图像对象返回给调用者</li><li>把生成的图像显示给用户</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> misc</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleCaptchaException</span>(<span class="params">Exception</span>):</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleCaptcha</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, length=<span class="number">5</span>, size=(<span class="params"><span class="number">200</span>, <span class="number">100</span></span>),fontsize=<span class="number">36</span>, random_text=<span class="literal">None</span>,random_bgcolor=<span class="literal">None</span></span>):</span></span><br><span class="line">self.size = size</span><br><span class="line">self.text = <span class="string">&quot;CAPTCHA&quot;</span></span><br><span class="line">self.fontsize = fontsize</span><br><span class="line">self.bocolor = <span class="number">255</span></span><br><span class="line">self.length = length</span><br><span class="line"></span><br><span class="line">self.image = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> random_text:</span><br><span class="line">self.text = self._random_text()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self.text:</span><br><span class="line"><span class="keyword">raise</span> SimpleCaptchaException(<span class="string">&#x27;Field text must not be empty.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self.size:</span><br><span class="line"><span class="keyword">raise</span> SimpleCaptchaException(<span class="string">&#x27;Size text must not be empty.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> self.fontsize:</span><br><span class="line"><span class="keyword">raise</span> SimpleCaptchaException(<span class="string">&#x27;Font text must not be empty.&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> random_bgcolor:</span><br><span class="line">self.bgcolor = self._random_color()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_center_coords</span>(<span class="params">self, draw, font</span>):</span></span><br><span class="line">width ,height = draw.textsize(self.text, font)</span><br><span class="line">xy = (self.size[<span class="number">0</span>]-width) / <span class="number">2.</span>, (self.size[<span class="number">1</span>] - height) / <span class="number">2.</span></span><br><span class="line"><span class="keyword">return</span> xy</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加 一些弧线形式的噪声</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_add_noise_dots</span>(<span class="params">self, draw</span>):</span></span><br><span class="line">size = self.image.size</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(size[<span class="number">0</span>] * size[<span class="number">1</span>] * <span class="number">0.1</span>)):</span><br><span class="line">draw.point((random.randint(<span class="number">0</span>, size[<span class="number">0</span>]), random.randint(<span class="number">0</span>, size[<span class="number">1</span>])),fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> draw</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一些直线形式的噪声</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_add_noise_lines</span>(<span class="params">self, draw</span>):</span></span><br><span class="line">size = self.image.size</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">width = random.randint(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">start = (<span class="number">0</span>, random.randint(<span class="number">0</span>, size[<span class="number">1</span>] - <span class="number">1</span>))</span><br><span class="line">end = (size[<span class="number">0</span>], random.randint(<span class="number">0</span>, size[<span class="number">1</span>] -<span class="number">1</span>))</span><br><span class="line">draw.line([start, end], fill = <span class="string">&quot;white&quot;</span>, width=width)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">start = (-<span class="number">50</span>, -<span class="number">50</span>)</span><br><span class="line">end = (size[<span class="number">0</span>] + <span class="number">10</span>, random.randint(<span class="number">0</span>, size[<span class="number">1</span>] +<span class="number">10</span>))</span><br><span class="line">draw.arc(start + end, <span class="number">0</span>, <span class="number">360</span>, fill=<span class="string">&quot;white&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> draw</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span>(<span class="params">self, size=<span class="literal">None</span>, text=<span class="literal">None</span>, bgcolor = <span class="literal">None</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> text <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">self.text = text</span><br><span class="line"><span class="keyword">if</span> size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">self.size = size</span><br><span class="line"><span class="keyword">if</span> bgcolor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">self.bgcolor = bgcolor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个新的图像对象</span></span><br><span class="line">self.image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, self.size, self.bgcolor)</span><br><span class="line">font = ImageFont.truetype(<span class="string">&#x27;fonts/Vera.ttf&#x27;</span>, self.fontsize)</span><br><span class="line">draw = ImageDraw.Draw(self.image)</span><br><span class="line">xy = self._center_coords(draw, font)</span><br><span class="line">draw.text(xy=xy, text=self.text, font=font)</span><br><span class="line"></span><br><span class="line">draw = self._add_noise_dots(draw)</span><br><span class="line"></span><br><span class="line">draw = self._add_noise_lines(draw)</span><br><span class="line"></span><br><span class="line">self.image.show()</span><br><span class="line"><span class="keyword">return</span> self.image, self.text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_random_text</span>(<span class="params">self</span>):</span></span><br><span class="line">letters = string.ascii_lowercase + string.ascii_uppercase + string.digits</span><br><span class="line">random_text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.length):</span><br><span class="line">random_text += random.choice(letters)</span><br><span class="line"><span class="keyword">return</span> random_text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从英文字母表中选取随机的字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_english_captcha</span>(<span class="params">self</span>):</span></span><br><span class="line">words = <span class="string">&#x27;/usr/share/dict/words&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(words, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">words = wf.readlines()</span><br><span class="line">aword = random.choice(words)</span><br><span class="line">aword = aword.strip()</span><br><span class="line"><span class="keyword">return</span> self.get_captcha(text=aword)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_random_color</span>(<span class="params">self</span>):</span></span><br><span class="line">r = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">g = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">b = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"><span class="keyword">return</span> (r, g, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">sc = SimpleCaptcha(length=<span class="number">20</span>, fontsize=<span class="number">50</span>, random_text=<span class="literal">True</span>, random_bgcolor=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># sc.get_captcha()</span></span><br><span class="line">sc.get_english_captcha()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>首先把功能封装到一个类SimpleCaptcha中，因为这为进一步开发提供了一个安全的空间。而且，又创建了一个自定义的SimpleCaptchaException解决异常。<br>从main函数开始，把要生成图像的设置作为参数传给构造函数，实例化对象。接着，在sc对象上调用get_captcha方法。 这个代码只是为了显示图像用了get_captcha方法，但是也可以把图像对象返回给这个方法可能的调用者以供其使用，用法有很多种，调用者可以把图像存储在文件中。如果封装成一个web应用，可以返回图像流并把结果写到请求该CAPTCHA的客户端。为了完成CAPTCHA测试的挑战-应答过程，必须返回在图像上生成的CAPTCHA字符串的文本，这样调用者才可以把用户的应答和期望的值进行比较。</p><p>如果用户提供了自定义值，为了覆盖类的默认值，get_captcha方法首先验证输入的参数。之后，通过Image.new实例化一个新的图像对象。该对象被存储到self.image中，我们用它来绘制和写入文本。在吧文本写入图像之后，添加了随机放置的点和线以及一些弧线段的噪声。这些工作通过_add_noise_points和_add_noise_lines完成。第一个函数循环地把一个点添加到图像上的一个不太靠近图像边缘的随机位置，第二个函数从函数从图像的左手边向图像的右手边绘制了几条线段。</p><p>在随机设置文本和背景颜色中，是假设用户只是想接受随机背景上的7个随机字符，然后从其得到结果。在随机获取字体中创建了一个get_english_captcha方法，其中包含了构造函数中的随机逻辑，然后从给定的英文字典中挑选随机单词。在unix/linux系统，在/usr/share/dict/words中有一个常用的英文字典，代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_english_captcha</span>(<span class="params">self</span>):</span></span><br><span class="line">words = <span class="string">&#x27;/usr/share/dict/words&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(words, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> wf:</span><br><span class="line">words = wf.readlines()</span><br><span class="line">aword = random.choice(words)</span><br><span class="line">aword = aword.strip()</span><br><span class="line"><span class="keyword">return</span> self.get_captcha(text=aword)</span><br></pre></td></tr></table></figure><br>总之，生成验证码的结果并没有达到产品级质量，因此必须使用前添加更多的保护如随机性如字符旋转：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#旋转文字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_image_rotate</span>(<span class="params">self, chars, color, background</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Create the CAPTCHA image itself.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param chars: text to be generated.</span></span><br><span class="line"><span class="string">    :param color: color of the text.</span></span><br><span class="line"><span class="string">    :param background: color of the background.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The color should be a tuple of 3 numbers, such as (0, 255, 255).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    image = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (self._width, self._height), background)</span><br><span class="line">    offset = random.randint(<span class="number">8</span>, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line">        font = random.choice(self.truefonts)</span><br><span class="line">        <span class="comment"># w, h = draw.textsize(c, font=font)</span></span><br><span class="line">        w,h = font.getsize(c)</span><br><span class="line">        im = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, (w , h),background)</span><br><span class="line">        color = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        ImageDraw.Draw(im).text((<span class="number">0</span>,<span class="number">0</span>), c, font=font, fill=color)</span><br><span class="line">        <span class="comment"># rotate</span></span><br><span class="line">        im = im.rotate(random.uniform(-<span class="number">30</span>, <span class="number">30</span>),Image.BILINEAR, expand=<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 创建一个与旋转图像大小相同的白色图像填充四角</span></span><br><span class="line">        fff = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, im.size, (<span class="number">255</span>,) * <span class="number">4</span>)</span><br><span class="line">        <span class="comment"># 复合图像</span></span><br><span class="line">        im = Image.composite(im,fff,im)</span><br><span class="line">        w, h = im.size</span><br><span class="line">        image.paste(im, (offset, <span class="built_in">int</span>((self._height - h) / <span class="number">2</span>)))</span><br><span class="line">        offset = offset + w + random.randint(-<span class="number">5</span>,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> image</span><br></pre></td></tr></table></figure></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在生成字体集合时，Windows和linux的路径是不一样的，一定要注意，不然会很吃亏<br>Windows： font = ImageFont.truetype(‘C:\Windows\Fonts\micross.ttf’, 36)<br>linux： font = ImageFont.truetype(‘fonts/Vera.ttf’, self.fontsize)<br>mac： ‘/Library/Fonts/Tahoma.ttf’</p><h2 id="附：-画验证码需要的一些基础"><a href="#附：-画验证码需要的一些基础" class="headerlink" title="附： 画验证码需要的一些基础"></a>附： 画验证码需要的一些基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建画笔，用于在图片上画任意内容</span></span><br><span class="line">img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(<span class="number">120</span>,<span class="number">50</span>), color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))  <span class="comment"># 黑色</span></span><br><span class="line">draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  画点</span></span><br><span class="line">img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(<span class="number">120</span>, <span class="number">60</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 第一个参数：表示坐标</span></span><br><span class="line"><span class="comment"># 第二个参数：表示颜色</span></span><br><span class="line">draw.point([<span class="number">100</span>, <span class="number">100</span>], fill=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">draw.point([<span class="number">105</span>, <span class="number">100</span>], fill=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">draw.point([<span class="number">110</span>, <span class="number">100</span>], fill=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">draw.point([<span class="number">300</span>, <span class="number">300</span>], fill=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"><span class="comment"># img.show()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画线</span></span><br><span class="line">img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(<span class="number">120</span>, <span class="number">30</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 第一个参数：表示起始坐标和结束坐标</span></span><br><span class="line"><span class="comment"># 第二个参数：表示颜色</span></span><br><span class="line">draw.line((<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>), fill=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">draw.line((<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">100</span>), fill=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写文本</span></span><br><span class="line">img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(<span class="number">120</span>, <span class="number">30</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 第一个参数：表示起始坐标</span></span><br><span class="line"><span class="comment"># 第二个参数：表示写入内容</span></span><br><span class="line"><span class="comment"># 第三个参数：表示颜色</span></span><br><span class="line">draw.text([<span class="number">0</span>,<span class="number">0</span>],<span class="string">&#x27;python&#x27;</span>,<span class="string">&quot;red&quot;</span>)</span><br><span class="line">img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊字体文字</span></span><br><span class="line">img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(<span class="number">180</span>, <span class="number">60</span>), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 第一个参数：表示字体文件路径</span></span><br><span class="line"><span class="comment"># 第二个参数：表示字体大小</span></span><br><span class="line">font = ImageFont.truetype(<span class="string">&#x27;arial.ttf&#x27;</span>,<span class="number">36</span>)</span><br><span class="line"><span class="comment"># 第一个参数：表示起始坐标</span></span><br><span class="line"><span class="comment"># 第二个参数：表示写入内容</span></span><br><span class="line"><span class="comment"># 第三个参数：表示颜色</span></span><br><span class="line"><span class="comment"># 第四个参数：表示颜色</span></span><br><span class="line">draw.text([<span class="number">0</span>, <span class="number">0</span>], <span class="string">&#x27;python&#x27;</span>, <span class="string">&quot;red&quot;</span>, font=font)</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure><p>生成字母+数字图形验证码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndChar</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成随机字母+数字</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> random.choice(string.ascii_lowercase + string.digits)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rndColor</span>():</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        生成随机颜色</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> (random.randint(<span class="number">0</span>, <span class="number">130</span>), random.randint(<span class="number">0</span>, <span class="number">130</span>), random.randint(<span class="number">0</span>, <span class="number">130</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_code</span>(<span class="params">width=<span class="number">180</span>, height=<span class="number">60</span>, char_length=<span class="number">5</span>, font_file=<span class="string">&#x27;micross.ttf&#x27;</span>, font_size=<span class="number">30</span></span>):</span></span><br><span class="line">    code = []</span><br><span class="line">    img = Image.new(mode=<span class="string">&#x27;RGB&#x27;</span>, size=(width, height), color=(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="comment"># 创建Font对象:</span></span><br><span class="line">    font = ImageFont.truetype(font_file, font_size)</span><br><span class="line">    <span class="comment"># 创建Draw对象:</span></span><br><span class="line">    draw = ImageDraw.Draw(img, mode=<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    <span class="comment"># # 填充每个像素:</span></span><br><span class="line">    <span class="comment"># for x in range(width):</span></span><br><span class="line">    <span class="comment">#     for y in range(height):</span></span><br><span class="line">    <span class="comment">#         draw.point((x, y), fill=rndColor())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写文字</span></span><br><span class="line">    font = ImageFont.truetype(font_file, font_size)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(char_length):</span><br><span class="line">        char = rndChar()</span><br><span class="line">        code.append(char)</span><br><span class="line">        h = random.randint(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">        draw.text([i * <span class="number">25</span>+<span class="number">6</span>, h], char, font=font, fill=rndColor())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写干扰点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50</span>):</span><br><span class="line">        draw.point([random.randint(<span class="number">0</span>, width), random.randint(<span class="number">0</span>, height)], fill=rndColor())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 画干扰线</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        x1 = random.randint(<span class="number">0</span>, width)</span><br><span class="line">        y1 = random.randint(<span class="number">0</span>, height)</span><br><span class="line">        x2 = random.randint(<span class="number">0</span>, width)</span><br><span class="line">        y2 = random.randint(<span class="number">0</span>, height)</span><br><span class="line"></span><br><span class="line">        draw.line((x1, y1, x2, y2), fill=rndColor())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># img = img.filter(ImageFilter.EDGE_ENHANCE_MORE)</span></span><br><span class="line">    <span class="keyword">return</span> img, <span class="string">&#x27;&#x27;</span>.join(code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1. 直接打开</span></span><br><span class="line">    img,code = check_code()</span><br><span class="line">    img.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;captcha 是用 python 写的生成验证码的库，它支持图片验证码和语音验证码，我们使用的是它生成图片验证码的功能。验证码由字母和数字组成，再加上一些噪点，但为了防止被识别，简单的图形验证码现在也变得复杂，有的加了干扰线，有的加噪点，有的加上背景，字体扭曲、粘连、镂空、混用等等，甚至有时候人眼都难以识别，只能默默点击“看不清，再来一张”&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python data visuslization" scheme="http://example.com/tags/Python-data-visuslization/"/>
    
  </entry>
  
  <entry>
    <title>tomorrow</title>
    <link href="http://example.com/2018/12/20/tomorrow/"/>
    <id>http://example.com/2018/12/20/tomorrow/</id>
    <published>2018-12-20T14:11:11.000Z</published>
    <updated>2018-12-20T14:49:53.239Z</updated>
    
    <content type="html"><![CDATA[<p>只要路和方向是对的，就不怕遥远</p><span id="more"></span><p>一直以来，都在徘徊浪费自己宝贵的时间不去做点东西，谁不知道知道时间很宝贵，今天还在梦里面看到以前的自己，又一次意识的时间的珍贵。我也知道我比别人笨很多，经常被别人看不起，但我不怕这些，我所害怕的就是这种徘徊不前，没有方向。如果有了自己的方向，谁还会想做一个碌碌无为的观众。我不怕吃苦，我也不相信会有我自己吃不了的苦，但是没有方向的迷茫和空虚是我做梦都怕的。</p><p><img src="pictures/hope.jpg" alt="招不出"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;只要路和方向是对的，就不怕遥远&lt;/p&gt;</summary>
    
    
    
    
    <category term="life" scheme="http://example.com/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>linux内核编译及添加系统调用</title>
    <link href="http://example.com/2018/11/03/linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%8F%8A%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2018/11/03/linux%E5%86%85%E6%A0%B8%E7%BC%96%E8%AF%91%E5%8F%8A%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</id>
    <published>2018-11-03T08:06:36.000Z</published>
    <updated>2018-12-20T14:21:22.935Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 是开源操作系统，用户可以根据自身系统需要裁剪、修改内核，定制出功能更加合适、运行效率更高的系统，因此，编译 linux 内核是进行内核开发的必要基本功。</p><span id="more"></span><h2 id="课程设计内容"><a href="#课程设计内容" class="headerlink" title="课程设计内容"></a>课程设计内容</h2><p>内容：添加一个系统调用，实现对指定进程的 nice 值的修改或读取功能， 并返回进程最新的 nice 值及优先级 prio。建议调用原型为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int mysetnice(pid_t pid, int flag, int nicevalue, <span class="keyword">void</span> __user * prio, <span class="keyword">void</span> __user * nice);</span><br></pre></td></tr></table></figure><p>参数含义:<br>pid：进程 ID。<br>flag：若值为 0，表示读取 nice 值；若值为 1，表示修改 nice 值。<br>prio、nice：进程当前优先级及 nice 值。<br>返回值： 系统调用成功时返回 0，失败时返回错误码 EFAULT。</p><h2 id="添加系统调用"><a href="#添加系统调用" class="headerlink" title="添加系统调用"></a>添加系统调用</h2><ol><li>分配系统调用号，修改系统调用表<br> 查看系统调用表(./arch/x86/entry/syscalls/syscall_64.tbl)<br> 添加一条记录  335        64        mysetnice         sys_mysetnice</li><li><p>申明系统调用服务例程原型<br>  文件 (./include/linux/syscalls.h) 中，在末尾endif上面添加一句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asmlinkage long sys_mysetnice(pid_t pid,int flag,int nicevalue,<span class="keyword">void</span> __user * prio,<span class="keyword">void</span> __user * nice);</span><br></pre></td></tr></table></figure><p>  其中“asmlinkage”是一个必须的限定词，用于通知编译器仅从堆栈中提取该函数的参数，而不是从寄存器中，因为在执行服务例程之前系统已经将通过寄存器传递过来的参数值压入内核堆栈了。</p></li><li>下面为新调用的 mysetnice 编写服务例程 sys_mysetnice， 通常添加在(./kernel/sys.c )文件中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">SYSCALL_DEFINE5(mysetnice, pid_t, pid, int, flag, int, nicevalue, <span class="keyword">void</span> __user *, prio, <span class="keyword">void</span> __user *, nice)</span><br><span class="line">&#123;</span><br><span class="line">struct pid * kpid = find_get_pid(pid);</span><br><span class="line">struct tast_struct * task = pid_task(kpid,PIDTYPE_PID);</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">1</span>)&#123;</span><br><span class="line">set_user_nice(task,nicevalue);</span><br><span class="line">int ni = task_nice(task);</span><br><span class="line">int pr = task_prio(task);</span><br><span class="line">copy_to_user(nice,&amp;ni,sizeof(ni));</span><br><span class="line">copy_to_user(prio,&amp;pr,sizeof(pr));</span><br><span class="line">printk(<span class="string">&quot;修改前的nice值：%d\t修改后的nice值：%d\n&quot;</span>, ni, nicevalue);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>( flag ==<span class="number">0</span> ) &#123;</span><br><span class="line">int ni = task_nice(task);</span><br><span class="line">int pr = task_prio(task);</span><br><span class="line">copy_to_user(nice,&amp;ni,sizeof(ni));</span><br><span class="line">copy_to_user(prio,&amp;pr,sizeof(pr));</span><br><span class="line">printk(<span class="string">&quot;该进程的nice值是：%d\n&quot;</span>, ni);</span><br><span class="line">printk(<span class="string">&quot;该进程的prio值是：%d\n&quot;</span>, pr);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> EFAULT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><ol><li>安装环境并下载源码后, 所有的命令都必须是root下，清除残留的.config和.o文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make mrproper</span><br></pre></td></tr></table></figure>warning：<br>安装过程中需要安装好几个包,由于是root下，所以就不需要sudo。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libncurses5-dev</span><br><span class="line">apt-get install libssl-dev</span><br><span class="line">apt-get install bison</span><br><span class="line">apt-get install flex</span><br></pre></td></tr></table></figure><ol><li>配置内核</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure><ol><li>编译内核，生成启动映像文件bzImage</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make -j4(<span class="number">4</span>核CPU)来加快编译速度</span><br></pre></td></tr></table></figure><ol><li>编译模块</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make modules</span><br></pre></td></tr></table></figure><ol><li>安装模块和内核</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make modules_install</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ol><li>配置grub引导程序，如下命令会自动修改grub</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub2</span><br></pre></td></tr></table></figure><ol><li>重启系统</li></ol><p>执行reboot，重启后可进入终端使用uname -a 查看内核版本。</p><ol><li>编写用户态程序测试新系统调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#define _GNU_SOURCE</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/syscall.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define __NR_mysetnice <span class="number">335</span> <span class="comment">//系统调用号</span></span><br><span class="line"></span><br><span class="line">int <span class="function"><span class="title">main</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    pid_t tid;</span><br><span class="line">    int nicevalue;</span><br><span class="line">    int prio = <span class="number">0</span>;</span><br><span class="line">    int nice = <span class="number">0</span>;</span><br><span class="line">    tid = getpid();</span><br><span class="line">    syscall(__NR_mysetnice,tid,<span class="number">0</span>,-<span class="number">5</span>,&amp;prio,&amp;nice);<span class="comment">//read</span></span><br><span class="line">    printf(<span class="string">&quot;pid: %d\nprio: %d\nnice: %d\n&quot;</span>, tid, prio,nice);</span><br><span class="line">    syscall(__NR_mysetnice,tid,<span class="number">1</span>,-<span class="number">5</span>,&amp;prio,&amp;nice);<span class="comment">//set</span></span><br><span class="line">    printf(<span class="string">&quot;pid: %d\nprio: %d\nnice: %d\n&quot;</span>, tid, prio,nice);</span><br><span class="line">    syscall(__NR_mysetnice,tid,<span class="number">0</span>,-<span class="number">5</span>,&amp;prio,&amp;nice);<span class="comment">//read</span></span><br><span class="line">    printf(<span class="string">&quot;pid: %d\nprio: %d\nnice: %d\n&quot;</span>, tid, prio,nice);  </span><br><span class="line">    printf(<span class="string">&quot;*******************************\n&quot;</span>);</span><br><span class="line">    syscall(__NR_mysetnice,tid,<span class="number">0</span>,-<span class="number">15</span>,&amp;prio,&amp;nice);<span class="comment">//read</span></span><br><span class="line">    printf(<span class="string">&quot;pid: %d\nprio: %d\nnice: %d\n&quot;</span>, tid, prio,nice);</span><br><span class="line">    syscall(__NR_mysetnice,tid,<span class="number">1</span>,-<span class="number">15</span>,&amp;prio,&amp;nice);<span class="comment">//set</span></span><br><span class="line">    printf(<span class="string">&quot;pid: %d\nprio: %d\nnice: %d\n&quot;</span>, tid, prio,nice);</span><br><span class="line">    syscall(__NR_mysetnice,tid,<span class="number">0</span>,-<span class="number">15</span>,&amp;prio,&amp;nice);<span class="comment">//read</span></span><br><span class="line">    printf(<span class="string">&quot;pid: %d\nprio: %d\nnice: %d\n&quot;</span>, tid, prio,nice);          </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在这里我们设置的 nice 值参数表示的是与执行指令的优先权等级，等级范围为 -20 ~ 19。数值越小，等级越高。只有系统管理者才可以设置负数的等级。我们在测试程序中先后设置了 nice 值为 -5 和 -15 的情况，可以自行观察当前进程调度块的 nice 值和 prio 值的变化。</li></ol><p>打开另外的一个终端，用一个终端不停地监视并且打印输出当前系统的日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while true </span><br><span class="line">do </span><br><span class="line">    sudo dmesg -c </span><br><span class="line">    sleep 1 </span><br><span class="line">done </span><br></pre></td></tr></table></figure><p>这样这个终端就会每1秒查看当前系统的日志并清空。</p><p>部分源码解读</p><h2 id="set-user-nice"><a href="#set-user-nice" class="headerlink" title="set_user_nice()"></a>set_user_nice()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在set_user_nice()中有一条语句：if (running)</span></span><br><span class="line"><span class="comment">//put_prev_task(rq, p);这个函数实际是调用CFS调度器的put_prev_task_fair（）函数，其功能是：修改当前进程的虚拟运行时间；如果进程在就绪队列中，则重新将其插入队列；设置CPU的当前运行进程为空。</span></span><br><span class="line"><span class="keyword">void</span> set_user_nice(struct task_struct *p, long nice)</span><br><span class="line">&#123;</span><br><span class="line">    bool queued, running;</span><br><span class="line">    int old_prio, delta;</span><br><span class="line">    struct rq_flags rf;</span><br><span class="line">    struct rq *rq;</span><br><span class="line">    <span class="keyword">if</span> (task_nice(p) == nice || nice &lt; MIN_NICE || nice &gt; MAX_NICE) <span class="comment">//要修改的Nice值与当前进程的nice值相同或超出了范围，则直接返回</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    rq = task_rq_lock(p, &amp;rf);       <span class="comment">//将队列上锁</span></span><br><span class="line">    update_rq_clock(rq);           <span class="comment">//更新cpu clock</span></span><br><span class="line">    <span class="keyword">if</span> (task_has_dl_policy(p) || task_has_rt_policy(p)) <span class="comment">//如果该进程是实时进程，那就开始改变该进程nice值</span></span><br><span class="line">&#123; </span><br><span class="line">        p-&gt;static_prio = NICE_TO_PRIO(nice);  <span class="comment">//根据nice值计算优先级</span></span><br><span class="line">        goto out_unlock;            <span class="comment">//去锁</span></span><br><span class="line">    &#125;</span><br><span class="line">    queued = task_on_rq_queued(p);  <span class="comment">//判断该进程是否在rq队列中</span></span><br><span class="line">    running = task_current(rq, p);     <span class="comment">//判断p进程是否在运行，如果在队列中，取出该进程</span></span><br><span class="line">    <span class="keyword">if</span> (queued)                    <span class="comment">//如果该进程在队列中</span></span><br><span class="line">        dequeue_task(rq, p, DEQUEUE_SAVE | DEQUEUE_NOCLOCK);  <span class="comment">//取出该进程</span></span><br><span class="line">    <span class="keyword">if</span> (running)                   <span class="comment">//如果该进程正在运行</span></span><br><span class="line">        put_prev_task(rq, p);</span><br><span class="line"></span><br><span class="line">    p-&gt;static_prio = NICE_TO_PRIO(nice);  <span class="comment">//根据Nice值计算进程优先级</span></span><br><span class="line">    set_load_weight(p);                  <span class="comment">//计算权重</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">*以下三句是将优先级做差</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    old_prio = p-&gt;prio;           </span><br><span class="line">    p-&gt;prio = effective_prio(p);       </span><br><span class="line">    delta = p-&gt;prio - old_prio;</span><br><span class="line">    <span class="keyword">if</span> (queued) &#123;</span><br><span class="line">        enqueue_task(rq, p, ENQUEUE_RESTORE | ENQUEUE_NOCLOCK);</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span> || (delta &gt; <span class="number">0</span> &amp;&amp; task_running(rq, p)))  <span class="comment">//如果差值小于0（优先级提高）或，重新调度rq队列</span></span><br><span class="line">            resched_curr(rq);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (running)</span><br><span class="line">        set_curr_task(rq, p);</span><br><span class="line">out_unlock:</span><br><span class="line">    task_rq_unlock(rq, p, &amp;rf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 简言之，根据 task_struct 确定一个进程，并改变进程 nice 值</span></span><br></pre></td></tr></table></figure><h2 id="copy-to-user"><a href="#copy-to-user" class="headerlink" title="copy_to_user()"></a>copy_to_user()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./include/linux/uaccess.h</span></span><br><span class="line">copy_to_user(<span class="keyword">void</span> __user *to, <span class="keyword">const</span> <span class="keyword">void</span> *<span class="keyword">from</span>, unsigned long n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (likely(check_copy_size(<span class="keyword">from</span>, n, <span class="literal">true</span>)))</span><br><span class="line">n = _copy_to_user(to, <span class="keyword">from</span>, n);</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 内核空间与用户空间的内存 不能 直接互访</span></span><br><span class="line"><span class="comment"> to目标地址用户空间的地址；</span></span><br><span class="line"><span class="comment"> from源地址内核空间的地址；</span></span><br><span class="line"><span class="comment"> n将要拷贝的数据的字节数。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="pid-task"><a href="#pid-task" class="headerlink" title="pid_task()"></a>pid_task()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./kernel/pid.c</span></span><br><span class="line">struct task_struct *pid_task(struct pid *pid, enum pid_type type)</span><br><span class="line">&#123;</span><br><span class="line">struct task_struct *result = NULL;</span><br><span class="line"><span class="keyword">if</span> (pid) &#123;</span><br><span class="line">struct hlist_node *first;</span><br><span class="line">first = rcu_dereference_check(hlist_first_rcu(&amp;pid-&gt;tasks[type]),</span><br><span class="line">      lockdep_tasklist_lock_is_held());</span><br><span class="line"><span class="keyword">if</span> (first)</span><br><span class="line">result = hlist_entry(first, struct task_struct, pids[(type)].node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(pid_task);</span><br><span class="line"><span class="comment">// 根据 pid 和 pid_type 确定一个 task_struct 类型的结构体，并返回他</span></span><br></pre></td></tr></table></figure><h2 id="find-get-pid"><a href="#find-get-pid" class="headerlink" title="find_get_pid()"></a>find_get_pid()</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./kernel/pid.c</span></span><br><span class="line">struct pid *find_get_pid(pid_t nr)</span><br><span class="line">&#123;</span><br><span class="line">struct pid *pid;</span><br><span class="line"></span><br><span class="line">rcu_read_lock();</span><br><span class="line">pid = get_pid(find_vpid(nr));</span><br><span class="line">rcu_read_unlock();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pid; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据 进程号 返回一个 pid 类型的结构体</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="task-struct"><a href="#task-struct" class="headerlink" title="task_struct"></a>task_struct</h2><p>task_struct是Linux内核的一种数据结构，它会被装载到RAM中并且包含着进程的信息。每个进程都把它的信息放在 task_struct 这个数据结构体中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./include/linux/sched.h</span></span><br><span class="line">struct task_struct &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">volatile longstate;  <span class="comment">// 602 lines</span></span><br><span class="line">    ......</span><br><span class="line">intprio;   <span class="comment">// 639 lines</span></span><br><span class="line">intstatic_prio;</span><br><span class="line">intnormal_prio;</span><br><span class="line">unsigned intrt_priority;</span><br><span class="line">    ......</span><br><span class="line">struct mm_struct*mm;    <span class="comment">// 688 lines</span></span><br><span class="line">struct mm_struct*active_mm;</span><br><span class="line">    ......</span><br><span class="line">pid_tpid;    <span class="comment">// 742 lines</span></span><br><span class="line">    ......</span><br><span class="line">struct sched_entity*parent;    <span class="comment">// 759 lines</span></span><br><span class="line">    ......</span><br><span class="line">struct list_headchildren;   <span class="comment">// 764 lines</span></span><br><span class="line">struct list_headsibling;</span><br><span class="line">    ......</span><br><span class="line">charcomm[TASK_COMM_LEN];    <span class="comment">// 842 lines</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Linux 是开源操作系统，用户可以根据自身系统需要裁剪、修改内核，定制出功能更加合适、运行效率更高的系统，因此，编译 linux 内核是进行内核开发的必要基本功。&lt;/p&gt;</summary>
    
    
    
    
    <category term="linux" scheme="http://example.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>the process is reward</title>
    <link href="http://example.com/2018/11/01/the-process-is-reward/"/>
    <id>http://example.com/2018/11/01/the-process-is-reward/</id>
    <published>2018-11-01T15:22:26.000Z</published>
    <updated>2018-11-01T15:54:39.737Z</updated>
    
    <content type="html"><![CDATA[<pre><code>    the process is reward</code></pre><p>大多数人把时间花在了超常加班，花在了朋友圈微博知乎和今日头条，他们的英文能力有限，不能获取第一手的资料，所以只有你看看英文文章，能静下心来读几本好书，写写博客，做一些训练，完全不用太努力，你就可以超越大多数人了。</p><span id="more"></span><p>在孤独寂寞中修炼<br>放弃无效表面的社交<br>用更好的自己<br>去见更好的人</p><p>等自己醒来<br>重走长征路<br>前途是光明的<br>道路是曲折的<br>the process is the reward<br>此刻的失败者终将胜利</p><p>来到南方，当一天五点多就开始天黑了，我才认识到一天是有多短，于是慢慢的喜欢上了黑夜，但是黑夜终是黑夜。有很多会妄自菲薄庸人自扰，反而不知道干什么。不如好好珍惜时间，过好每一天，人生苦短，且行且珍惜。</p>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;    the process is reward
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大多数人把时间花在了超常加班，花在了朋友圈微博知乎和今日头条，他们的英文能力有限，不能获取第一手的资料，所以只有你看看英文文章，能静下心来读几本好书，写写博客，做一些训练，完全不用太努力，你就可以超越大多数人了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="life" scheme="http://example.com/tags/life/"/>
    
  </entry>
  
</feed>
